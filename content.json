{"meta":{"title":"阿帅","subtitle":"","description":"这是一个关于技术分享、生活感悟和创意灵感的博客。","author":"jiangshuai","url":"https://Jiang07Shuai06.github.io","root":"/"},"pages":[{"title":"分类","date":"2024-09-20T04:24:36.000Z","updated":"2024-09-20T04:33:58.747Z","comments":true,"path":"categories/index.html","permalink":"https://jiang07shuai06.github.io/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2024-10-11T11:48:27.035Z","updated":"2024-09-20T04:38:41.238Z","comments":true,"path":"friends/index.html","permalink":"https://jiang07shuai06.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"标签","date":"2024-09-20T04:45:32.000Z","updated":"2024-09-20T04:49:42.268Z","comments":true,"path":"tags/index.html","permalink":"https://jiang07shuai06.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2024-10-11T11:48:27.032Z","updated":"2024-08-31T00:44:14.047Z","comments":true,"path":"about/index.html","permalink":"https://jiang07shuai06.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"}],"posts":[{"title":"QWQ","slug":"QWQ","date":"2024-10-12T03:20:16.000Z","updated":"2024-10-15T02:53:45.002Z","comments":true,"path":"2024/10/12/QWQ/","permalink":"https://jiang07shuai06.github.io/2024/10/12/QWQ/","excerpt":"","text":"这两天放假，闲来无事对博客进行重构，结果遇到了好多知识盲区，虽然被打击了，但我还是非常开心，让我明白23年的时候，前辈和我说的：”只要代码可以正常跑，就不要自作聪明去优化它“😭😭 马上要进击 Docker 啦，加油加油⛷️⛷️","categories":[{"name":"QWQ","slug":"QWQ","permalink":"https://jiang07shuai06.github.io/categories/QWQ/"}],"tags":[{"name":"QWQ","slug":"QWQ","permalink":"https://jiang07shuai06.github.io/tags/QWQ/"}],"author":"byte76"},{"title":"正则表达式","slug":"regex","date":"2024-10-10T03:36:35.000Z","updated":"2024-10-10T08:07:45.253Z","comments":true,"path":"2024/10/10/regex/","permalink":"https://jiang07shuai06.github.io/2024/10/10/regex/","excerpt":"","text":"1、锚点^ 匹配字符串或行的开头$ 匹配字符串或行的末尾\\b 匹配单词的开头或末尾\\B 匹配不在单词的开头或末尾的位置 2、字符类[abc] 字符集，匹配集合中的任意字符[^abc] 反选字符集，匹配不在集合中的任意字符[a-z] 匹配两个字符之间的任意字符，包括它们本身. 匹配除换行符之外的任意字符\\w 匹配字母、数字或下划线\\W 匹配除字母、数字或下划线之外的任意字符\\d 匹配所有数字\\D 匹配除数字外的任意字符\\s 匹配所有空白字符\\S 匹配除空白字符以外的任意字符 3、量词与分支‘+’ 表达式匹配一个或多个‘*’ 表达式匹配零个或多个{n} 表达式匹配恰好出现 n 次的元素{n,} 表达h式匹配至少出现 n 次的元素{n,m} 表达式匹配 n 到 m 次的元素? 使用表达式可选| 类似于“或”，用于匹配多种符合条件的表达式之一 4、零宽断言(?&#x3D;) 正向先行断言(?!) 负向先行断言(?&lt;&#x3D;) 正向后行断言(?&lt;!) 负向后行断言 5、标志i 使表达式忽略大小写g 确保表达式不会在检索到第一个匹配项时停止m 如果不启用，”^”和”$”只匹配整个字符串的开始和结束，而不会单独匹配每一行 6、组和引用( ) 使表达式分组\\1 引用表达式的分组(?:) 创建无法引用的分组 扩展： sed（流编辑器）中的模式空间和保存空间 模式空间（Pattern Space） 就像是一个临时的工作区。当 sed 处理一行文本时，会把这一行内容放到模式空间里。然后在这个模式空间中对这行文本进行各种操作，比如替换、删除、打印等。 保持空间（Hold Space） 这是一个额外的存储区域。你可以把一些内容从模式空间复制到保持空间进行暂存，或者从保持空间把内容取回模 式空间进行进一步处理。比如你在处理一个文件时，遇到一些特殊的行想先保存起来，等处理到后面的时候再拿出 来用，就可以把这些行放到保持空间","categories":[{"name":"shell","slug":"shell","permalink":"https://jiang07shuai06.github.io/categories/shell/"}],"tags":[{"name":"jottings","slug":"jottings","permalink":"https://jiang07shuai06.github.io/tags/jottings/"}]},{"title":"天气预报自动推送","slug":"weather-report","date":"2024-10-07T09:29:17.000Z","updated":"2024-10-07T10:04:40.062Z","comments":true,"path":"2024/10/07/weather-report/","permalink":"https://jiang07shuai06.github.io/2024/10/07/weather-report/","excerpt":"","text":"一、申请微信测试公众号（https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login） 获取到这四个值 appID, appSecret, openId, template_id 想让谁收消息，谁就用微信扫二维码，刷新页面后即出现在用户列表，获取微信号（openId） 新增测试模板获得 template_id（模板ID） 天气模板： 123456今天：&#123;&#123;date.DATA&#125;&#125;地区：&#123;&#123;region.DATA&#125;&#125;天气：&#123;&#123;weather.DATA&#125;&#125;气温：&#123;&#123;temp.DATA&#125;&#125;风向：&#123;&#123;wind_dir.DATA&#125;&#125;对你说的话：&#123;&#123;today_note.DATA&#125;&#125; 课程表模板： 1消息：&#123;&#123;message.DATA&#125;&#125; 二、配置代码 将上面获得的几个值填入代码这几行，启动即可 12345678appID = &quot;&quot;appSecret = &quot;&quot;#收信人ID即 用户列表中的微信号，见上文openId = &quot;&quot;# 天气预报模板IDweather_template_id = &quot;&quot;# 时间表模板IDtimetable_template_id = &quot;&quot; 定时任务（根据需求进行修改这几行） 12345schedule.every().day.at(&quot;08:00&quot;).do(weather_report, &quot;北京&quot;)# schedule.every().monday.at(&quot;13:30&quot;).do(timetable, &quot;还有15分钟开始下午的课程&quot;)while True: schedule.run_pending() time.sleep(1) 完成代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166# 安装依赖 pip3 install requests html5lib bs4 scheduleimport timeimport requestsimport jsonimport schedulefrom bs4 import BeautifulSoup# 从测试号信息获取appID = &quot;wx1c904b832908e3d7&quot;appSecret = &quot;024e7a99b9bd93e4ec2ba0e61cb99869&quot;#收信人ID即 用户列表中的微信号，见上文openId = &quot;oLg156sEhzpHX3f6OKG6HaCTid9s&quot;# 天气预报模板IDweather_template_id = &quot;T00eYDomN3GOBXOTqTYhX27Nqp-vCdDO2xHKAK1ElH8&quot;# 时间表模板IDtimetable_template_id = &quot;kg29LwRP6--uo6Xq3mm-aRyJFaF_Pe2SsnUjYq23YpA&quot;def get_weather(my_city): urls = [&quot;http://www.weather.com.cn/textFC/hb.shtml&quot;, &quot;http://www.weather.com.cn/textFC/db.shtml&quot;, &quot;http://www.weather.com.cn/textFC/hd.shtml&quot;, &quot;http://www.weather.com.cn/textFC/hz.shtml&quot;, &quot;http://www.weather.com.cn/textFC/hn.shtml&quot;, &quot;http://www.weather.com.cn/textFC/xb.shtml&quot;, &quot;http://www.weather.com.cn/textFC/xn.shtml&quot; ] for url in urls: resp = requests.get(url) text = resp.content.decode(&quot;utf-8&quot;) soup = BeautifulSoup(text, &#x27;html5lib&#x27;) div_conMidtab = soup.find(&quot;div&quot;, class_=&quot;conMidtab&quot;) tables = div_conMidtab.find_all(&quot;table&quot;) for table in tables: trs = table.find_all(&quot;tr&quot;)[2:] for index, tr in enumerate(trs): tds = tr.find_all(&quot;td&quot;) # 这里倒着数，因为每个省会的td结构跟其他不一样 city_td = tds[-8] this_city = list(city_td.stripped_strings)[0] if this_city == my_city: high_temp_td = tds[-5] low_temp_td = tds[-2] weather_type_day_td = tds[-7] weather_type_night_td = tds[-4] wind_td_day = tds[-6] wind_td_day_night = tds[-3] high_temp = list(high_temp_td.stripped_strings)[0] low_temp = list(low_temp_td.stripped_strings)[0] weather_typ_day = list(weather_type_day_td.stripped_strings)[0] weather_type_night = list(weather_type_night_td.stripped_strings)[0] wind_day = list(wind_td_day.stripped_strings)[0] + list(wind_td_day.stripped_strings)[1] wind_night = list(wind_td_day_night.stripped_strings)[0] + list(wind_td_day_night.stripped_strings)[1] # 如果没有白天的数据就使用夜间的 temp = f&quot;&#123;low_temp&#125;——&#123;high_temp&#125;摄氏度&quot; if high_temp != &quot;-&quot; else f&quot;&#123;low_temp&#125;摄氏度&quot; weather_typ = weather_typ_day if weather_typ_day != &quot;-&quot; else weather_type_night wind = f&quot;&#123;wind_day&#125;&quot; if wind_day != &quot;--&quot; else f&quot;&#123;wind_night&#125;&quot; return this_city, temp, weather_typ, winddef get_access_token(): # 获取access token的url url = &#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#123;&#125;&amp;secret=&#123;&#125;&#x27; \\ .format(appID.strip(), appSecret.strip()) response = requests.get(url).json() print(response) access_token = response.get(&#x27;access_token&#x27;) return access_tokendef get_daily_love(): # 每日一句情话 url = &quot;https://api.lovelive.tools/api/SweetNothings/Serialization/Json&quot; r = requests.get(url) all_dict = json.loads(r.text) sentence = all_dict[&#x27;returnObj&#x27;][0] daily_love = sentence return daily_lovedef send_weather(access_token, weather): # touser 就是 openID # template_id 就是模板ID # url 就是点击模板跳转的url # data就按这种格式写，time和text就是之前&#123;&#123;time.DATA&#125;&#125;中的那个time，value就是你要替换DATA的值 import datetime today = datetime.date.today() today_str = today.strftime(&quot;%Y年%m月%d日&quot;) body = &#123; &quot;touser&quot;: openId.strip(), &quot;template_id&quot;: weather_template_id.strip(), &quot;url&quot;: &quot;https://weixin.qq.com&quot;, &quot;data&quot;: &#123; &quot;date&quot;: &#123; &quot;value&quot;: today_str &#125;, &quot;region&quot;: &#123; &quot;value&quot;: weather[0] &#125;, &quot;weather&quot;: &#123; &quot;value&quot;: weather[2] &#125;, &quot;temp&quot;: &#123; &quot;value&quot;: weather[1] &#125;, &quot;wind_dir&quot;: &#123; &quot;value&quot;: weather[3] &#125;, &quot;today_note&quot;: &#123; &quot;value&quot;: get_daily_love() &#125; &#125; &#125; url = &#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#123;&#125;&#x27;.format(access_token) print(requests.post(url, json.dumps(body)).text)def send_timetable(access_token, message): body = &#123; &quot;touser&quot;: openId, &quot;template_id&quot;: timetable_template_id.strip(), &quot;url&quot;: &quot;https://weixin.qq.com&quot;, &quot;data&quot;: &#123; &quot;message&quot;: &#123; &quot;value&quot;: message &#125;, &#125; &#125; url = &#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#123;&#125;&#x27;.format(access_token) print(requests.post(url, json.dumps(body)).text)def weather_report(city): # 1.获取access_token access_token = get_access_token() # 2. 获取天气 weather = get_weather(city) print(f&quot;天气信息： &#123;weather&#125;&quot;) # 3. 发送消息 send_weather(access_token, weather)def timetable(message): # 1.获取access_token access_token = get_access_token() # 3. 发送消息 send_timetable(access_token, message)if __name__ == &#x27;__main__&#x27;: weather_report(&quot;河北&quot;) # timetable(&quot;第二教学楼十分钟后开始英语课&quot;) # schedule.every().day.at(&quot;08:00&quot;).do(weather_report, &quot;北京&quot;) # schedule.every().monday.at(&quot;13:30&quot;).do(timetable, &quot;还有15分钟开始下午的课程&quot;) #while True: # schedule.run_pending() # time.sleep(1) 原创文档链接：https://www.bilibili.com/read/cv28928153/ 原创视频链接：https://www.bilibili.com/video/BV1Ng4y1r7EP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=576ff0210b33e8823a0a538d3f79f11f","categories":[{"name":"python","slug":"python","permalink":"https://jiang07shuai06.github.io/categories/python/"}],"tags":[{"name":"jottings","slug":"jottings","permalink":"https://jiang07shuai06.github.io/tags/jottings/"}]},{"title":"外星人入侵","slug":"alien-invasion","date":"2024-10-04T11:05:33.000Z","updated":"2024-10-04T11:55:03.712Z","comments":true,"path":"2024/10/04/alien-invasion/","permalink":"https://jiang07shuai06.github.io/2024/10/04/alien-invasion/","excerpt":"","text":"遇到的问题及注意事项： 编写计分模块 scoreborad.py 时，变量引用错误，没搞清楚使用的是值传递还是引用传递 参考链接 https://blog.csdn.net/hohaizx/article/details/78427406 飞船数量与设置模块 settings.py 中的飞船设置相关 外星人、子弹、飞船移动速度以及幅度与设置模块 settings.py 中的 initialize_dynamic_settings 函数设置相关 参考资料及源码： 参考书籍《Python编程——从入门到实践》 参考教程链接 https://www.modb.pro/db/49581 通过百度网盘分享的文件：alien_invasion_2.0.zip 链接：https://pan.baidu.com/s/1NTkG7Mk_5sw4uzQLVU8ieQ?pwd=byte 提取码：byte","categories":[{"name":"python","slug":"python","permalink":"https://jiang07shuai06.github.io/categories/python/"}],"tags":[{"name":"games","slug":"games","permalink":"https://jiang07shuai06.github.io/tags/games/"}]},{"title":"monthly_report_240929","slug":"monthly-report-240929","date":"2024-09-29T01:04:32.000Z","updated":"2024-09-30T02:40:58.116Z","comments":true,"path":"2024/09/29/monthly-report-240929/","permalink":"https://jiang07shuai06.github.io/2024/09/29/monthly-report-240929/","excerpt":"","text":"这篇月报将会分为四部分进行阐述 回顾9月学习内容 遇到的问题分析 解决方法与教训 10月的大致规划 一、9月回顾关于Linux系统（CentOS、Ubuntu）有了夯实的基础，掌握了磁盘和文件系统的管理、进程和计划任务管理、用户账号和权限管理，可以搭建如DNS、DHCP、NFS、Rsync、FTP等等服务，目前已经展开了对Shell脚本的学习……； 在课外学习Python语言的类和实例对象、模块导入及引用其类、函数，开始编写第一个项目——《外星人入侵》游戏 二、问题分析 搞错了rsync和sersync谁是数据源谁是备份数据源的对应关系，并对实时同步产生了新的理解； 编写”飞船“时，修改了飞船的初始位置，但在后面又将其设置为了初始值，导致无法左右持续移动； 1234567891011def update(self): &quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot; # 更新飞船的属性x的值，而不是其外接矩形的属性x的值 if self.moving_right and self.rect.right &lt; self.screen_rect.right: self.rect.x += self.settings.ship_speed if self.moving_left and self.rect.left &gt; 0: self.rect.x -= self.settings.ship_speed # 不需要再将self.rect.x设置为self.x，因为self.x没有在其他地方更新 # self.rect.x = self.x 对于函数、类、模块、方法、属性概念性的知识以及中间的关联不够清晰 在这段时间中，发现自己的专注力有一个时间点，一般为上午2至3小时，下午3至5小时，一旦超过自己的专注时间再就很难学进去； 会因为外界的声音产生一些焦虑和不安，但又会时常感性，觉得世事无常，最不确定的事情总是那些已经确定了的事情。 三、解决方法 rsync是一个远程数据同步工具，它通过比较源和目标文件的修改时间、大小等信息来决定哪些文件需要被同步，而sersync是基于rsync开发的一款工具，通过内核的inotify机制来监控文件系统的事件（如文件的创建、修改、删除等）一旦检测到文件系统有变化，就立即触发rsync命令来进行数据通过，这样就可以做到实时同步，其中sersync作为数据源，而rsync则是备份方 注：如果要让两者的身份进行互换，则可以在rsync端通过执行命令将本地文件发送到目标rsync端（也就是sersync端） 将其冲突的属性进行注释保留 函数：函数是一段可重复使用的代码块，用于执行特定的任务。它接受输入参数（可以是零个或多个），并根据这些参数执行一系列操作，最后可能返回一个结果（也可以不返回任何结果，即返回值为None） 123def add_numbers(a, b): return a + b# 这个add_numbers函数接受两个参数a和b，将它们相加并返回结果 函数可以独立存在，也可以作为类中的方法存在（后面会详细介绍方法）。在模块中，函数是基本的代码组织单元，可以被其他函数、类或模块调用。 类：类是一种抽象的数据类型，用于创建对象（实例）。它定义了一组属性（描述对象的特征）和方法（描述对象的行为） 12345678class Person: def __init__(self, name, age): self.name = name self.age = age def introduce(self): return f&quot;My name is &#123;self.name&#125; and I&#x27;m &#123;self.age&#125; years old.&quot;# 这里Person类有name和age两个属性，以及introduce方法 类可以包含多个函数（方法），这些方法用于操作类的属性或者执行与类相关的操作。类是对象 - 面向对象编程（OOP）的核心概念，通过实例化类可以创建多个具有相同属性和方法定义的对象。类可以被组织在模块中。 模块：模块是一个包含 Python 定义和语句的文件，其文件名就是模块名（去掉.py扩展名）。模块用于组织代码，将相关的函数、类等代码组织在一起，方便代码的管理、复用和维护。 123# my_module.pydef add_numbers(a, b): return a + b 模块可以包含多个函数、类等代码元素。一个模块中的函数或类可以被其他模块导入并使用。这有助于将大型项目分解成多个小的、可管理的部分，提高代码的可读性和可维护性。 方法：方法是定义在类内部的函数，它与类的实例（对象）相关联。方法可以访问和操作类的属性，并且第一个参数通常是self（在 Python 中），用于指代调用该方法的对象实例。 例如，前面Person类中的introduce方法就是一个类方法，它通过self访问name和age属性。 12345678910111213class Person: def __init__(self, name, age): self.name = name self.age = age def introduce(self): return f&quot;My name is &#123;self.name&#125; and I&#x27;m &#123;self.age&#125; years old.&quot;# 创建Person类的实例person1 = Person(&quot;Alice&quot;, 25)# 调用introduce方法并打印结果print(person1.introduce()) 方法是类的重要组成部分，它依赖于类的定义存在。不同的类可以有相同名称的方法，但它们的功能可能因类的属性和逻辑不同而有所差异。 属性：属性是与类或对象相关联的数据值。在类中，属性可以在类的内部定义，通过实例化类后，对象就拥有了这些属性。属性可以是简单的数据类型（如整数、字符串等），也可以是复杂的数据结构（如列表、字典等）。 在前面的Person类中，name和age就是属性。 属性是类和对象的状态描述。类的方法通常会操作这些属性来实现特定的功能。属性的值可以在类的方法中被修改，也可以在对象创建时进行初始化。 调整学习时间，在无法专注的时候去做一些简单轻松可以完成的事情，驱使自己去做一些感兴趣的爱好 时间是最好的答案⛷️ 四、10月规划 首先是对于10月1假期要完成的列表 完成正在编写的 Python小游戏——《外星人入侵》 预习shell脚本实战 备战10月19、20日的学历考试 [^CHEER ON]:","categories":[{"name":"monthly report","slug":"monthly-report","permalink":"https://jiang07shuai06.github.io/categories/monthly-report/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://jiang07shuai06.github.io/tags/demo/"}]},{"title":"weekly_report_240920","slug":"weekly-report-240920","date":"2024-09-20T02:34:41.000Z","updated":"2024-10-01T07:46:48.062Z","comments":true,"path":"2024/09/20/weekly-report-240920/","permalink":"https://jiang07shuai06.github.io/2024/09/20/weekly-report-240920/","excerpt":"","text":"对于本月的前三周学习成果以及个人状态做出的总结与反省课内学习： Linux操作系统安装及服务控制 Linux-CentOS常用命令 Linux安装软件包 账号和权限管理 磁盘和文件系统管理 进程和计划任务管理 系统启动流程、分析日志文件和检查系统故障 Linux基础网络设置 ftp文件传输服务 DNS域名解析服务 sshd服务搭建管理 nginx网络服务基础 在实验操作过程当中，关于进程和系统日志类别需要再进一步巩固，在搭建DNS服务时遇到了因软件包版本不同而失败的问题，搭建nginx遇到了DNS解析问题。解决方法：针对进程和日志类别总结了一份word，dns服务器则更换了软件包版本-win，nginx通过在本地的hosts文件中添加对应的dns主机解析-win。 课外学习：对python中的类有了基础的了解和掌握 其一，是__init__方法 含义：一个特殊的方法，叫做构造方法。当一个类的实例被创建时，__init__方法会自动被调用，用于初始化这个实例的属性。 作用：设置对象的初始状态，比如可以再这个方法中接受参数，为对象的属性赋值。 12345class Person: def __init__(self, name, age): self.name = name self.age = age&#x27;&#x27;&#x27; 在这个例子中，当创建一个Person类的实例时，__init__方法会接收name和age两个参数，并将它们分别赋值给实例的name和age属性。&#x27;&#x27;&#x27; 其二，是 self 参数 含义：self代表类的实例（对象）本身。在类的方法中，必须要有一个参数代表实例对象，这个参数通常被命名为self。 作用：通过self可以访问和操作实例的属性与方法。 12345678class Person: def __init__(self, name, age): self.name = name self.age = age def introduce(self): print(f&quot;Hello, I am &#123;self.name&#125; and I am &#123;self.age&#125; years old.&quot;)&#x27;&#x27;&#x27; 在introduce方法中，通过self.name和self.age访问了实例的属性，并打印出相应的信息。当调用这个方法时，实际上是在操作特定的实例对象。&#x27;&#x27;&#x27; 个人状态方面：9月9日凌晨，错过一位喜欢了很久的姑娘，时常会感到惋惜……，但是这并不会成为终章⛷️⛷️😎","categories":[{"name":"weekly report","slug":"weekly-report","permalink":"https://jiang07shuai06.github.io/categories/weekly-report/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://jiang07shuai06.github.io/tags/demo/"}]},{"title":"自省计划","slug":"2024-09-18","date":"2024-09-18T02:15:20.000Z","updated":"2024-10-01T12:28:03.873Z","comments":true,"path":"2024/09/18/2024-09-18/","permalink":"https://jiang07shuai06.github.io/2024/09/18/2024-09-18/","excerpt":"","text":"每三周进行一次不计字数的总结与反省周报 每个月的月底上传至博客一篇月报","categories":[],"tags":[{"name":"demo","slug":"demo","permalink":"https://jiang07shuai06.github.io/tags/demo/"}]},{"title":"第一篇文章","slug":"test","date":"2024-08-31T01:00:00.000Z","updated":"2024-09-29T01:07:53.979Z","comments":true,"path":"2024/08/31/test/","permalink":"https://jiang07shuai06.github.io/2024/08/31/test/","excerpt":"","text":"&#x2F;&#x2F; 测试12345上山打老虎","categories":[{"name":"test","slug":"test","permalink":"https://jiang07shuai06.github.io/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"https://jiang07shuai06.github.io/tags/test/"}]}],"categories":[{"name":"QWQ","slug":"QWQ","permalink":"https://jiang07shuai06.github.io/categories/QWQ/"},{"name":"shell","slug":"shell","permalink":"https://jiang07shuai06.github.io/categories/shell/"},{"name":"python","slug":"python","permalink":"https://jiang07shuai06.github.io/categories/python/"},{"name":"monthly report","slug":"monthly-report","permalink":"https://jiang07shuai06.github.io/categories/monthly-report/"},{"name":"weekly report","slug":"weekly-report","permalink":"https://jiang07shuai06.github.io/categories/weekly-report/"},{"name":"test","slug":"test","permalink":"https://jiang07shuai06.github.io/categories/test/"}],"tags":[{"name":"QWQ","slug":"QWQ","permalink":"https://jiang07shuai06.github.io/tags/QWQ/"},{"name":"jottings","slug":"jottings","permalink":"https://jiang07shuai06.github.io/tags/jottings/"},{"name":"games","slug":"games","permalink":"https://jiang07shuai06.github.io/tags/games/"},{"name":"demo","slug":"demo","permalink":"https://jiang07shuai06.github.io/tags/demo/"},{"name":"test","slug":"test","permalink":"https://jiang07shuai06.github.io/tags/test/"}]}