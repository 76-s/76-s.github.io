{"meta":{"title":"阿帅","subtitle":"","description":"这是一个关于技术分享、生活感悟和创意灵感的博客。","author":"byte76","url":"https://Jiang07Shuai06.github.io","root":"/"},"pages":[{"title":"","date":"2024-10-22T11:26:49.446Z","updated":"2024-10-22T11:26:49.446Z","comments":true,"path":"about/index.html","permalink":"https://jiang07shuai06.github.io/about/index.html","excerpt":"","text":"🌹🌹请看 VCR：https://bytelife7676.github.io/"},{"title":"我的朋友们","date":"2024-10-11T11:48:27.035Z","updated":"2024-09-20T04:38:41.238Z","comments":true,"path":"friends/index.html","permalink":"https://jiang07shuai06.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"标签","date":"2024-09-20T04:45:32.000Z","updated":"2024-09-20T04:49:42.268Z","comments":true,"path":"tags/index.html","permalink":"https://jiang07shuai06.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2024-09-20T04:24:36.000Z","updated":"2024-09-20T04:33:58.747Z","comments":true,"path":"categories/index.html","permalink":"https://jiang07shuai06.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"心灵鸡汤007","slug":"心灵鸡汤007","date":"2024-11-02T05:22:32.000Z","updated":"2024-11-16T00:34:52.691Z","comments":true,"path":"2024/11/02/心灵鸡汤007/","permalink":"https://jiang07shuai06.github.io/2024/11/02/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4007/","excerpt":"","text":"最近很焦虑，总是担心一些没有发生的事情，做计划也老是往最坏的方向想，但是这两天晚上夜跑的时候突然就想通了，也没那么内耗了，想要分享记录下来： 现在的 “大学生活” 让我学会接受所有可能性，不再机械地活着，不再批判他人的选择和决定， 有人努力奋斗，我钦佩他不顾一切的勤奋 有人选择躺平，我羡慕她享受生活的自由 有人频繁约会，我觉得他的经历丰富多彩 有人追求纯爱，我祝他找到自我的第一选择 有人选择毕业就结婚，我希望他幸福 有女孩享受带大学四年单身自由，我欣赏她的独立 互联网上总是争吵 “大学” 的价值观，因为人总是习惯性地，把自我价值观强加给别人 然而有什么事只有一个答案呢？谁能说自己地选择更正确呢？所处的世界是一个多元化地，要学会接受 “不同” 🫡😶‍🌫️🥱😃😄⛷️💧💫🪸💯","categories":[{"name":"生活感悟","slug":"生活感悟","permalink":"https://jiang07shuai06.github.io/source/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"qwq","slug":"qwq","permalink":"https://jiang07shuai06.github.io/source/tags/qwq/"}]},{"title":"Hexo+Github==>个人博客","slug":"Hexo-Github-个人博客","date":"2024-10-20T08:17:35.000Z","updated":"2024-10-26T02:30:07.425Z","comments":true,"path":"2024/10/20/Hexo-Github-个人博客/","permalink":"https://jiang07shuai06.github.io/2024/10/20/Hexo-Github-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"这篇文章是对于使用 hexo 和 github 搭建个人博客的思路梳理1、下载 node.jshttps://nodejs.org/zh-cn 2、下载 githttps://git-scm.com/downloads 验证是否下载成功，管理员运行 cmd 输入以下三条命令 123node -vnpm -vgit -v 3、下载 hexo1npm install hexo-cli -g 4、搭建仓库名称格式：仓库名称.github.io 勾选 Public 勾选 Add a README file 拉到下面点击 create 创建 5、生成SSH Keys进入任意文件夹，右键空白处然后点Git bash here,输入 1ssh-keygen -t rsa -C &quot;邮件地址&quot; 然后敲4次Enter⌨️然后进入C:\\Users\\用户名，在里面进入.ssh文件用记事本打开里面的id_rsa.pub,全选复制里面的代码然后打开github进入用户设置，找到SSH keys新建SSH keys，名称随意，在下面粘贴代码，然后创建测试是否成功在git bash中输入 1ssh -T git@github.com 回车，然后再输入 yes 6、本地部署在喜欢位置新建文件Blog，然后进入文件夹右键空白处然后点 Git bash here，输入 1hexo init 然后依次输入 12hexo g # 生成hexo s # 预览 （如果不成功的话就重复直到成功，因为国内与github连接不稳定）现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了然后回到命令行，ctrl+c 关闭 7、上线博客进入之前的Blog文件夹，用记事本打开_config.yml编辑 url 段落 123# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://Jiang07Shuai06.github.io 拉到最下面将deploy后面的全删掉，复制粘贴这段 123type: gitrepository: branch: main 注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！去 github 之前生成的仓库页面，点 code，复制 https链接将其粘贴到我们记事本中的 repository：后面然后保存退出回到博客文件夹，git bash安装自动部署发布工具 1npm install hexo-deployer-git --save 然后在Blog文件夹右键打开git bash，依次输入 12hexo g # 生成hexo d # 上传 如果是第一次使用git的话会需要配置git config --global user.email &quot;你的邮箱&quot;git config --global user.name &quot;你的名字&quot;配置完后再 hexo d 上传在跳出来的窗口内进行登录接下来我们就成功把本地内容上传到github了上传成功以后，我们就算搭建好了！上自己的网址看看吧网址是我们之前设的仓库名：用户名.github.io 文章参考🔗：https://blog.fiveth.cc/p/bb32/#%E5%87%86%E5%A4%87%E5%B7%A5%E5%85%B7","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://jiang07shuai06.github.io/source/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"正则表达式","slug":"正则表达式","date":"2024-10-10T03:36:35.000Z","updated":"2024-10-26T02:33:57.502Z","comments":true,"path":"2024/10/10/正则表达式/","permalink":"https://jiang07shuai06.github.io/2024/10/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"1、锚点^ 匹配字符串或行的开头$ 匹配字符串或行的末尾\\b 匹配单词的开头或末尾\\B 匹配不在单词的开头或末尾的位置 2、字符类[abc] 字符集，匹配集合中的任意字符[^abc] 反选字符集，匹配不在集合中的任意字符[a-z] 匹配两个字符之间的任意字符，包括它们本身. 匹配除换行符之外的任意字符\\w 匹配字母、数字或下划线\\W 匹配除字母、数字或下划线之外的任意字符\\d 匹配所有数字\\D 匹配除数字外的任意字符\\s 匹配所有空白字符\\S 匹配除空白字符以外的任意字符 3、量词与分支‘+’ 表达式匹配一个或多个‘*’ 表达式匹配零个或多个{n} 表达式匹配恰好出现 n 次的元素{n,} 表达h式匹配至少出现 n 次的元素{n,m} 表达式匹配 n 到 m 次的元素? 使用表达式可选| 类似于“或”，用于匹配多种符合条件的表达式之一 4、零宽断言(?&#x3D;) 正向先行断言(?!) 负向先行断言(?&lt;&#x3D;) 正向后行断言(?&lt;!) 负向后行断言 5、标志i 使表达式忽略大小写g 确保表达式不会在检索到第一个匹配项时停止m 如果不启用，”^”和”$”只匹配整个字符串的开始和结束，而不会单独匹配每一行 6、组和引用( ) 使表达式分组\\1 引用表达式的分组(?:) 创建无法引用的分组 扩展： sed（流编辑器）中的模式空间和保存空间 模式空间（Pattern Space） 就像是一个临时的工作区。当 sed 处理一行文本时，会把这一行内容放到模式空间里。然后在这个模式空间中对这行文本进行各种操作，比如替换、删除、打印等。 保持空间（Hold Space） 这是一个额外的存储区域。你可以把一些内容从模式空间复制到保持空间进行暂存，或者从保持空间把内容取回模 式空间进行进一步处理。比如你在处理一个文件时，遇到一些特殊的行想先保存起来，等处理到后面的时候再拿出 来用，就可以把这些行放到保持空间","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://jiang07shuai06.github.io/source/tags/Shell/"}]},{"title":"天气预报自动推送","slug":"天气预报推送","date":"2024-10-07T09:29:17.000Z","updated":"2024-10-26T02:34:44.175Z","comments":true,"path":"2024/10/07/天气预报推送/","permalink":"https://jiang07shuai06.github.io/2024/10/07/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E6%8E%A8%E9%80%81/","excerpt":"","text":"一、申请微信测试公众号（https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login） 获取到这四个值 appID, appSecret, openId, template_id 想让谁收消息，谁就用微信扫二维码，刷新页面后即出现在用户列表，获取微信号（openId） 新增测试模板获得 template_id（模板ID） 天气模板： 123456今天：&#123;&#123;date.DATA&#125;&#125;地区：&#123;&#123;region.DATA&#125;&#125;天气：&#123;&#123;weather.DATA&#125;&#125;气温：&#123;&#123;temp.DATA&#125;&#125;风向：&#123;&#123;wind_dir.DATA&#125;&#125;对你说的话：&#123;&#123;today_note.DATA&#125;&#125; 课程表模板： 1消息：&#123;&#123;message.DATA&#125;&#125; 二、配置代码 将上面获得的几个值填入代码这几行，启动即可 12345678appID = &quot;&quot;appSecret = &quot;&quot;#收信人ID即 用户列表中的微信号，见上文openId = &quot;&quot;# 天气预报模板IDweather_template_id = &quot;&quot;# 时间表模板IDtimetable_template_id = &quot;&quot; 定时任务（根据需求进行修改这几行） 12345schedule.every().day.at(&quot;08:00&quot;).do(weather_report, &quot;北京&quot;)# schedule.every().monday.at(&quot;13:30&quot;).do(timetable, &quot;还有15分钟开始下午的课程&quot;)while True: schedule.run_pending() time.sleep(1) 完成代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166# 安装依赖 pip3 install requests html5lib bs4 scheduleimport timeimport requestsimport jsonimport schedulefrom bs4 import BeautifulSoup# 从测试号信息获取appID = &quot;wx1c904b832908e3d7&quot;appSecret = &quot;024e7a99b9bd93e4ec2ba0e61cb99869&quot;#收信人ID即 用户列表中的微信号，见上文openId = &quot;oLg156sEhzpHX3f6OKG6HaCTid9s&quot;# 天气预报模板IDweather_template_id = &quot;T00eYDomN3GOBXOTqTYhX27Nqp-vCdDO2xHKAK1ElH8&quot;# 时间表模板IDtimetable_template_id = &quot;kg29LwRP6--uo6Xq3mm-aRyJFaF_Pe2SsnUjYq23YpA&quot;def get_weather(my_city): urls = [&quot;http://www.weather.com.cn/textFC/hb.shtml&quot;, &quot;http://www.weather.com.cn/textFC/db.shtml&quot;, &quot;http://www.weather.com.cn/textFC/hd.shtml&quot;, &quot;http://www.weather.com.cn/textFC/hz.shtml&quot;, &quot;http://www.weather.com.cn/textFC/hn.shtml&quot;, &quot;http://www.weather.com.cn/textFC/xb.shtml&quot;, &quot;http://www.weather.com.cn/textFC/xn.shtml&quot; ] for url in urls: resp = requests.get(url) text = resp.content.decode(&quot;utf-8&quot;) soup = BeautifulSoup(text, &#x27;html5lib&#x27;) div_conMidtab = soup.find(&quot;div&quot;, class_=&quot;conMidtab&quot;) tables = div_conMidtab.find_all(&quot;table&quot;) for table in tables: trs = table.find_all(&quot;tr&quot;)[2:] for index, tr in enumerate(trs): tds = tr.find_all(&quot;td&quot;) # 这里倒着数，因为每个省会的td结构跟其他不一样 city_td = tds[-8] this_city = list(city_td.stripped_strings)[0] if this_city == my_city: high_temp_td = tds[-5] low_temp_td = tds[-2] weather_type_day_td = tds[-7] weather_type_night_td = tds[-4] wind_td_day = tds[-6] wind_td_day_night = tds[-3] high_temp = list(high_temp_td.stripped_strings)[0] low_temp = list(low_temp_td.stripped_strings)[0] weather_typ_day = list(weather_type_day_td.stripped_strings)[0] weather_type_night = list(weather_type_night_td.stripped_strings)[0] wind_day = list(wind_td_day.stripped_strings)[0] + list(wind_td_day.stripped_strings)[1] wind_night = list(wind_td_day_night.stripped_strings)[0] + list(wind_td_day_night.stripped_strings)[1] # 如果没有白天的数据就使用夜间的 temp = f&quot;&#123;low_temp&#125;——&#123;high_temp&#125;摄氏度&quot; if high_temp != &quot;-&quot; else f&quot;&#123;low_temp&#125;摄氏度&quot; weather_typ = weather_typ_day if weather_typ_day != &quot;-&quot; else weather_type_night wind = f&quot;&#123;wind_day&#125;&quot; if wind_day != &quot;--&quot; else f&quot;&#123;wind_night&#125;&quot; return this_city, temp, weather_typ, winddef get_access_token(): # 获取access token的url url = &#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#123;&#125;&amp;secret=&#123;&#125;&#x27; \\ .format(appID.strip(), appSecret.strip()) response = requests.get(url).json() print(response) access_token = response.get(&#x27;access_token&#x27;) return access_tokendef get_daily_love(): # 每日一句情话 url = &quot;https://api.lovelive.tools/api/SweetNothings/Serialization/Json&quot; r = requests.get(url) all_dict = json.loads(r.text) sentence = all_dict[&#x27;returnObj&#x27;][0] daily_love = sentence return daily_lovedef send_weather(access_token, weather): # touser 就是 openID # template_id 就是模板ID # url 就是点击模板跳转的url # data就按这种格式写，time和text就是之前&#123;&#123;time.DATA&#125;&#125;中的那个time，value就是你要替换DATA的值 import datetime today = datetime.date.today() today_str = today.strftime(&quot;%Y年%m月%d日&quot;) body = &#123; &quot;touser&quot;: openId.strip(), &quot;template_id&quot;: weather_template_id.strip(), &quot;url&quot;: &quot;https://weixin.qq.com&quot;, &quot;data&quot;: &#123; &quot;date&quot;: &#123; &quot;value&quot;: today_str &#125;, &quot;region&quot;: &#123; &quot;value&quot;: weather[0] &#125;, &quot;weather&quot;: &#123; &quot;value&quot;: weather[2] &#125;, &quot;temp&quot;: &#123; &quot;value&quot;: weather[1] &#125;, &quot;wind_dir&quot;: &#123; &quot;value&quot;: weather[3] &#125;, &quot;today_note&quot;: &#123; &quot;value&quot;: get_daily_love() &#125; &#125; &#125; url = &#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#123;&#125;&#x27;.format(access_token) print(requests.post(url, json.dumps(body)).text)def send_timetable(access_token, message): body = &#123; &quot;touser&quot;: openId, &quot;template_id&quot;: timetable_template_id.strip(), &quot;url&quot;: &quot;https://weixin.qq.com&quot;, &quot;data&quot;: &#123; &quot;message&quot;: &#123; &quot;value&quot;: message &#125;, &#125; &#125; url = &#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#123;&#125;&#x27;.format(access_token) print(requests.post(url, json.dumps(body)).text)def weather_report(city): # 1.获取access_token access_token = get_access_token() # 2. 获取天气 weather = get_weather(city) print(f&quot;天气信息： &#123;weather&#125;&quot;) # 3. 发送消息 send_weather(access_token, weather)def timetable(message): # 1.获取access_token access_token = get_access_token() # 3. 发送消息 send_timetable(access_token, message)if __name__ == &#x27;__main__&#x27;: weather_report(&quot;河北&quot;) # timetable(&quot;第二教学楼十分钟后开始英语课&quot;) # schedule.every().day.at(&quot;08:00&quot;).do(weather_report, &quot;北京&quot;) # schedule.every().monday.at(&quot;13:30&quot;).do(timetable, &quot;还有15分钟开始下午的课程&quot;) #while True: # schedule.run_pending() # time.sleep(1) 原创文档链接：https://www.bilibili.com/read/cv28928153/ 原创视频链接：https://www.bilibili.com/video/BV1Ng4y1r7EP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=576ff0210b33e8823a0a538d3f79f11f","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://jiang07shuai06.github.io/source/tags/Python/"}]},{"title":"外星人入侵","slug":"外星人入侵","date":"2024-10-04T11:05:33.000Z","updated":"2024-10-26T02:30:49.441Z","comments":true,"path":"2024/10/04/外星人入侵/","permalink":"https://jiang07shuai06.github.io/2024/10/04/%E5%A4%96%E6%98%9F%E4%BA%BA%E5%85%A5%E4%BE%B5/","excerpt":"","text":"遇到的问题及注意事项： 编写计分模块 scoreborad.py 时，变量引用错误，没搞清楚使用的是值传递还是引用传递 参考链接 https://blog.csdn.net/hohaizx/article/details/78427406 飞船数量与设置模块 settings.py 中的飞船设置相关 外星人、子弹、飞船移动速度以及幅度与设置模块 settings.py 中的 initialize_dynamic_settings 函数设置相关 参考资料及源码： 参考书籍《Python编程——从入门到实践》 参考教程链接 https://www.modb.pro/db/49581 通过百度网盘分享的文件：alien_invasion_2.0.zip 链接：https://pan.baidu.com/s/1NTkG7Mk_5sw4uzQLVU8ieQ?pwd=byte 提取码：byte","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://jiang07shuai06.github.io/source/tags/Python/"}]},{"title":"第一篇文章","slug":"test","date":"2024-08-31T01:00:00.000Z","updated":"2024-10-26T02:34:17.428Z","comments":true,"path":"2024/08/31/test/","permalink":"https://jiang07shuai06.github.io/2024/08/31/test/","excerpt":"","text":"&#x2F;&#x2F; 测试12345上山打老虎","categories":[{"name":"样本","slug":"样本","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%A0%B7%E6%9C%AC/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://jiang07shuai06.github.io/source/tags/%E6%B5%8B%E8%AF%95/"}],"author":"byte76"}],"categories":[{"name":"生活感悟","slug":"生活感悟","permalink":"https://jiang07shuai06.github.io/source/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"},{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"},{"name":"样本","slug":"样本","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%A0%B7%E6%9C%AC/"}],"tags":[{"name":"qwq","slug":"qwq","permalink":"https://jiang07shuai06.github.io/source/tags/qwq/"},{"name":"博客","slug":"博客","permalink":"https://jiang07shuai06.github.io/source/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Shell","slug":"Shell","permalink":"https://jiang07shuai06.github.io/source/tags/Shell/"},{"name":"Python","slug":"Python","permalink":"https://jiang07shuai06.github.io/source/tags/Python/"},{"name":"测试","slug":"测试","permalink":"https://jiang07shuai06.github.io/source/tags/%E6%B5%8B%E8%AF%95/"}]}