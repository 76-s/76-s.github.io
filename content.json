{"meta":{"title":"阿帅","subtitle":"","description":"这是一个关于技术分享、生活感悟和创意灵感的博客。","author":"byte76","url":"https://Jiang07Shuai06.github.io","root":"/"},"pages":[{"title":"","date":"2024-10-22T11:26:49.446Z","updated":"2024-10-22T11:26:49.446Z","comments":true,"path":"about/index.html","permalink":"https://jiang07shuai06.github.io/about/index.html","excerpt":"","text":"🌹🌹请看 VCR：https://bytelife7676.github.io/"},{"title":"标签","date":"2024-09-20T04:45:32.000Z","updated":"2024-09-20T04:49:42.268Z","comments":true,"path":"tags/index.html","permalink":"https://jiang07shuai06.github.io/tags/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2024-10-11T11:48:27.035Z","updated":"2024-09-20T04:38:41.238Z","comments":true,"path":"friends/index.html","permalink":"https://jiang07shuai06.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"分类","date":"2024-09-20T04:24:36.000Z","updated":"2024-09-20T04:33:58.747Z","comments":true,"path":"categories/index.html","permalink":"https://jiang07shuai06.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"月报-24年10月","slug":"monthly-rport-241029","date":"2024-10-29T08:39:00.000Z","updated":"2024-10-29T09:45:42.286Z","comments":true,"path":"2024/10/29/monthly-rport-241029/","permalink":"https://jiang07shuai06.github.io/2024/10/29/monthly-rport-241029/","excerpt":"","text":"查漏补缺URL和 URI URL（统一资源定位符）：是 URI 的一种具体实现方式，它不仅标识了资源，还详细说明了如何通过网络协议来定位和访问该资源 URI（统一资源定位符）：是一个用于标识某一互联网资源名称的字符串，它为互联网上的资源提供了一个标准的、通用的标识方法 URL 是 URI 的子集： 所有的 URL 都是 URI，因为 URL 满足 URI 的基本定义，即用于标识资源。URL 在 URI 的基础上，增加了定位和访问资源的具体信息，使其更加具体和实用。 可以简单地理解为，URI 是一个更广泛的概念，而 URL 是 URI 在网络资源访问领域的一种具体化和实用化的形式。 四层负载和七层负载 处理速度：四层负载均衡处理速度更快，七层负载均衡由于需要解析应用层协议，速度相对较慢，但提供了更精细的请求处理功能。 功能侧重点：四层负载均衡功能相对简单，主要侧重于网络层和传输层的流量分配；七层负载均衡功能丰富，包括内容优化、安全防护、精准请求分配等。 应用场景：四层负载均衡适用于对速度和通用性要求高的场景，七层负载均衡适用于需要深入处理应用层内容和优化复杂应用的场景 金丝雀和蓝绿（两种软件部署策略） 原理：金丝雀发布得名于煤矿工人使用金丝雀检测矿井中的有毒气体。在软件部署中，它是指先将新版本软件部署到一小部分用户（如 1 - 5%）或服务器上，作为 “金丝雀”，对这些 “金丝雀” 进行密切监控，观察其在真实环境中的运行情况，包括性能、稳定性、错误率等指标，然后再决定是否将新版本全面部署。 特点：逐步推进、风险可控、反馈及时 原理：蓝绿发布是将生产环境分为蓝色环境和绿色环境两个完全相同（或高度相似）的环境，蓝色环境为当前正在运行的生产环境，绿色环境为准备部署新版本的环境。在部署时，先将新版本部署到绿色环境中，对绿色环境进行全面测试，包括功能测试、性能测试、稳定性测试等，当确定绿色环境中的新版本没有问题后，将流量从蓝色环境切换到绿色环境，从而完成新版本的部署。 特点：环境隔离、快速切换 有状态应用和无状态应用 无状态应用：在处理请求时，不依赖于之前的请求或会话信息的应用程序。每个请求都被视为独立的操作，应用程序仅根据当前请求中包含的信息来生成响应，而不考虑之前发生了什么。例如，一个简单的静态网页服务器，它接收客户端请求并返回对应的 HTML 文件，每次请求都是独立的，服务器不需要知道客户端之前的访问历史。 有状态应用：在处理请求的过程中，需要依赖于之前的请求、会话或者其他外部存储中的状态信息来生成响应。这些状态信息可以存储在内存、数据库、文件系统等地方。比如一个网上银行系统，用户登录后进行转账操作，系统需要知道用户的登录状态、账户余额等信息，这些信息就是状态信息，转账操作需要基于这些状态信息来完成。 孤儿进程和僵尸进程 孤儿进程：父进程先于它的子进程结束运行时，这个子进程就会成为孤儿进程。在 Linux 中会被 init 进程（进程ID为1 ）接管。 僵尸进程：当一个子进程结束后，它的进程控制块（PCB）等资源没有被父进程调用 wait( ) 或 waitpid( ) 等系统去回收子进程资源，子进程就会变成僵尸进程。此时子进程虽然已经终止运行，但在系统进程表中仍保留其相关信息。 成果总结 Docker 的安装、制作 | 分发镜像、容器、网络、贮存 python的第一个项目——学习日志小程序 扩展小知识Docker的图标 容器化象征：集装箱代表着 Docker 所提供的容器技术。在现实世界中，集装箱标准化了货物的包装和运输方式，使得货物可以高效、安全地在不同运输工具和地点之间流转。同样，Docker 容器标准化了软件的打包和部署方式，使得应用程序可以在不同的计算环境中轻松运行，不受底层基础设施的差异影响。 鲸鱼作为载体：鲸鱼通常被视为强大和稳定的象征。在 Docker 的图标中，鲸鱼承载着集装箱，寓意着 Docker 为应用程序提供了一个强大而稳定的运行平台。就像鲸鱼在海洋中自由游动一样，Docker 使得应用程序可以在不同的计算环境中自由部署和运行。 10月21日从朋友口中听到了小鹰成为老鹰的故事，我想我会以所想象到的语言来记录下：小鹰成长为老鹰是一个充满挑战与蜕变的过程。 小鹰从破壳而出开始，便在父母的庇护下逐渐认识这个世界。最初，它只能待在巢穴里，等待父母带回食物。但随着身体的发育，小鹰开始在巢穴周围活动，锻炼自己弱小的翅膀和爪子。这是成长的第一阶段，就像孩子的学步期，开始试探自己的能力。 当小鹰的羽翼逐渐丰满，真正的考验便来临了。老鹰父母会故意减少对小鹰的食物供给，这促使小鹰开始尝试飞行。小鹰第一次从巢穴边缘飞出，那种对高度和速度的恐惧是巨大的。然而，这只是开始，因为飞行不仅仅是离开巢穴，还需要掌握平衡、方向和高度的控制。小鹰会在一次次的试飞中不断调整自己的飞行姿态，可能会多次跌落，但每一次跌落都是成长的积累。 学会飞行之后，小鹰要学习捕食技能。小鹰要在广阔天空中锁定猎物，然后以极快的速度俯冲下去。这个过程需要敏锐的视力、精准的判断和强大的爆发力。小鹰开始可能会失败，找不到目标或者抓不住猎物，但它会通过不断观察父母的捕食技巧，不断练习，最终成为一名优秀的 “猎手”。 经过这些艰难的历练，小鹰在身体和心智上都逐渐成熟，最终完成从依赖父母的小鹰到独立自主的老鹰的转变，翱翔在广阔的天空中，开始自己的生命旅程。 —— LSQ","categories":[{"name":"月报","slug":"月报","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%9C%88%E6%8A%A5/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://jiang07shuai06.github.io/source/tags/demo/"}]},{"title":"docker-贮存","slug":"docker-贮存","date":"2024-10-26T04:00:14.000Z","updated":"2024-10-26T04:02:09.430Z","comments":true,"path":"2024/10/26/docker-贮存/","permalink":"https://jiang07shuai06.github.io/2024/10/26/docker-%E8%B4%AE%E5%AD%98/","excerpt":"","text":"笔记链接🔗：https://ocns4u1yk5x3.feishu.cn/docx/IBWCd1ueaoOHevxirozcT3NZn0g?from=from_copylink","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://jiang07shuai06.github.io/source/tags/Docker/"}],"author":"byte76"},{"title":"docker-网络","slug":"docker-network","date":"2024-10-26T03:58:24.000Z","updated":"2024-10-26T04:00:48.162Z","comments":true,"path":"2024/10/26/docker-network/","permalink":"https://jiang07shuai06.github.io/2024/10/26/docker-network/","excerpt":"","text":"笔记链接🔗：https://ocns4u1yk5x3.feishu.cn/docx/VkmzdDWBEomJucxjUqHcYc3knmg?from=from_copylink","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://jiang07shuai06.github.io/source/tags/Docker/"}],"author":"byte76"},{"title":"docker-容器","slug":"docker-容器","date":"2024-10-26T03:49:20.000Z","updated":"2024-10-26T03:56:44.430Z","comments":true,"path":"2024/10/26/docker-容器/","permalink":"https://jiang07shuai06.github.io/2024/10/26/docker-%E5%AE%B9%E5%99%A8/","excerpt":"","text":"docker容器Docker利用容器来运行应用。容器是从镜像创建的运行实例，它可以被启动、开始、停止、 删除。每个容器都是相互隔离的、保证安全的平台，每个应用运行在隔离的容器中，享用独自的权限，用户，网络。确保安全与互相干扰。 注：镜像是只读的，容器在启动的时候创建一层可写层作为最上层。镜像是只读的，不可以修改，但是容器层是rw的，提供给用户操作镜像image与容器Container区别：镜像是静态的，不会运行。容器则是动态的，有生命周期 运行容器docker run 是启动容器的方法。在讨论 Dockerfile 时我们已经学习到，可用三种方式指定容器启动时执行的命令：(1) CMD指令。(2) ENTRYPOINT 指令。(3)在docker run 命令行中指定 进入容器我们经常需要进到容器里去做一些工作，比如查看日志、调试、启动其他进程等。有两种方法进入容器：attach 和 exec stop&#x2F;start&#x2F;restart 容器 pause&#x2F;unpause 容器有时我们只是希望暂时让容器暂停工作一段时间，比如要对容器的文件系统打个快照，或者 dcoker host 需要使用 CPU，这时可以执行 docker pause 。处于暂停状态的容器不会占用 CPU 资源，直到通过 docker unpause 恢复运行 容器导入和导出导出容器docker export [容器 id] &gt; [导出文件]如果要导出本地某个容器，可以使用docker export 命令，这样将导出容器快照到本地文件导入容器docker import [导入文件] [ REPOSITORY : TAG ]可以使用 docker import 从容器快照文件中再导入为镜像 查看容器的信息用docker inspect查看容器的信息，命令格式：docker inspect 容器ID或容器名用docker inspect查看容器的ip地址 1docker inspect -f &#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; &lt;容器名称&gt; 用docker inspect查看容器执行的程序 1docker inspect -f &#x27;&#123;&#123;.Config.Cmd&#125;&#125;&#x27; &lt;容器名称&gt;","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://jiang07shuai06.github.io/source/tags/Docker/"}],"author":"byte76"},{"title":"docker-分发镜像","slug":"docker-分发镜像","date":"2024-10-26T03:41:15.000Z","updated":"2024-10-26T03:44:42.466Z","comments":true,"path":"2024/10/26/docker-分发镜像/","permalink":"https://jiang07shuai06.github.io/2024/10/26/docker-%E5%88%86%E5%8F%91%E9%95%9C%E5%83%8F/","excerpt":"","text":"分发镜像概述：将构建好的镜像分发给不同环境或用户的过程作用： 部署应用：分发镜像使得在不同的服务器、云平台或本地环境中快速部署应用成为可能。通过将镜像推送到不同的目标位置，可以确保应用在各种环境中以一致的方式运行。 团队协作：在团队开发中，镜像分发可以方便团队成员共享和使用相同的基础镜像或应用镜像。这有助于提高开发效率，减少环境差异导致的问题。 可扩展性：通过分发镜像，可以轻松地将应用扩展到多个节点或容器实例，以满足不同的负载需求。 Docker 仓库 推送镜像：使用 docker push 命令将本地构建的镜像推送到指定的仓库。例如，docker push myregistry&#x2F;myimage:latest 将名为 myimage 的镜像推送到名为 myregistry 的仓库。 拉取镜像：在目标环境中，使用 docker pull 命令从仓库中拉取所需的镜像。例如，docker pull myregistry&#x2F;myimage:latest 从仓库中拉取名为 myimage 的镜像。 私有仓库 对于企业或团队内部的使用，可以搭建私有 Docker 仓库。私有仓库提供了更高的安全性和控制度，可以限制对镜像的访问权限。 搭建私有仓库可以使用开源软件如 Docker Registry 或 Harbor。配置好私有仓库后，就可以像使用公共仓库一样进行镜像的推送和拉取。 直接传输 在某些情况下，可能需要直接在不同的服务器之间传输 Docker 镜像，而不通过仓库。 可以使用 docker save 和 docker load 命令来实现。 首先，在源服务器上使用 docker save 命令将镜像保存为一个 tar 文件。例如，docker save -o myimage.tar myimage:latest。 然后，将 tar 文件传输到目标服务器，可以使用文件传输工具如 scp 或 ftp。 在目标服务器上，使用 docker load 命令从 tar 文件中加载镜像。例如，docker load -i myimage.tar。 注意事项 镜像标签：在分发镜像时，使用有意义的镜像标签非常重要。标签可以帮助区分不同版本的镜像，方便管理和部署。例如，使用 latest 标签表示最新版本，或者使用具体的版本号如 v1.0。 安全性：在使用公共仓库或传输镜像时，要注意安全性。确保镜像来源可靠，避免使用来自不可信来源的镜像，以防止潜在的安全风险。 网络环境：分发镜像可能会受到网络环境的影响。在网络条件较差的情况下，可以考虑使用压缩技术或分批次传输来提高传输效率。","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://jiang07shuai06.github.io/source/tags/Docker/"}],"author":"byte76"},{"title":"docker-实例ssh","slug":"docker-实例ssh","date":"2024-10-26T03:37:22.000Z","updated":"2024-10-26T03:40:35.413Z","comments":true,"path":"2024/10/26/docker-实例ssh/","permalink":"https://jiang07shuai06.github.io/2024/10/26/docker-%E5%AE%9E%E4%BE%8Bssh/","excerpt":"","text":"笔记链接🔗：https://ocns4u1yk5x3.feishu.cn/docx/Kwqsdw59Wo4hnRxlcfqcZ5nPnWg?from=from_copylink","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://jiang07shuai06.github.io/source/tags/Docker/"}],"author":"byte76"},{"title":"Docker-镜像","slug":"docker-image","date":"2024-10-26T03:15:23.000Z","updated":"2024-10-26T03:34:10.206Z","comments":true,"path":"2024/10/26/docker-image/","permalink":"https://jiang07shuai06.github.io/2024/10/26/docker-image/","excerpt":"","text":"笔记链接🔗：https://ocns4u1yk5x3.feishu.cn/docx/GvcBdYAbtodEwsxOsktclbD4nRc?from=from_copylink","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://jiang07shuai06.github.io/source/tags/Docker/"}],"author":"byte76"},{"title":"Docker-Dockerfile","slug":"docker-dockerfile","date":"2024-10-26T03:15:23.000Z","updated":"2024-10-26T03:34:40.837Z","comments":true,"path":"2024/10/26/docker-dockerfile/","permalink":"https://jiang07shuai06.github.io/2024/10/26/docker-dockerfile/","excerpt":"","text":"笔记链接🔗：https://ocns4u1yk5x3.feishu.cn/docx/L3wrdyakXojtfKxm0QAcUxPknzT?from=from_copylink","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://jiang07shuai06.github.io/source/tags/Docker/"}],"author":"byte76"},{"title":"Docker-安装","slug":"docker-install","date":"2024-10-26T03:07:11.000Z","updated":"2024-10-26T03:12:33.159Z","comments":true,"path":"2024/10/26/docker-install/","permalink":"https://jiang07shuai06.github.io/2024/10/26/docker-install/","excerpt":"","text":"docker的安装分别使用了centos、Rocky、OpenEuler进行安装，具体流程如下： 1、前言：Docker 常见的安装方式有两种： 操作系统发行版安装包（RPM、Deb，在线安装时常用的建议方式，本文选用）；二进制安装包（适用于离线部署、集成定制化部署）采用操作系统发行版安装包方案时，也有两种方式可选： 利用官方脚本，自动安装配置（适用于网络不受限的环境）；手动安装配置 2、centos https://docs.docker.com/engine/install/centos/（官方教程） 1sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 执行上述命令时，遇到报错，显示网络错误，可能是DNS污染的原因，搜索 http://www.ip33.com/dns.html 输入download.docker.com 进行解析，从输出内容中选择一条填入 &#x2F;etc&#x2F;hosts 文件最后一行。 1234567891011#!/bin/shcat &lt;&lt;-EOF &gt; /etc/docker/daemon.json &#123;&quot;registry-mirrors&quot;: [ &quot;https://hub.geekery.cn/&quot;, &quot;https://ghcr.geekery.cn&quot; ]&#125;EOFsystemctl daemon-reloadsystemctl restart docker 安装完成后配置镜像加速，执行上方脚本，参考链接 https://xuanyuan.me/blog/archives/1154#Linux 还有一种方法是使用阿里云的https://cr.console.aliyun.com/cn-beijing/instances/mirrors 3、Rocky利用官方脚本，自动安装配置，直接走官方教程 4、OpenEuler走官方centos安装教程一直不好，于是去Google寻求安装方法，暂时参考下述文档https://cloud.tencent.com/developer/article/2383890 5、结语遇到的主要问题：docker容器内无法联网参考连接：https://juejin.cn/post/7361720687956901899Cheer On~ ⛷️⛷️","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://jiang07shuai06.github.io/source/tags/Docker/"}],"author":"byte76"},{"title":"weekly_report_241020","slug":"weekly-report-241020","date":"2024-10-20T08:58:42.000Z","updated":"2024-10-26T02:36:04.773Z","comments":true,"path":"2024/10/20/weekly-report-241020/","permalink":"https://jiang07shuai06.github.io/2024/10/20/weekly-report-241020/","excerpt":"","text":"第一周结束了 shell 脚本中 awk 和 sed 的学习，主要从中汲取了循环、判断、嵌套……的逻辑思路 第二周开启了 docker 之旅~ 学习了一些关于 docker 的基本概念及安装 构建镜像分为 基于基础镜像 和 使用 Dockerfile 两种方式 使用 Dockerfile 构建时的常用指令 第三周开始使用 python 编写Web程序，预计下个月中旬上线云服务器✌ 练习分发镜像，两种情况：公共仓库和私有仓库（推荐）","categories":[{"name":"周报","slug":"周报","permalink":"https://jiang07shuai06.github.io/source/categories/%E5%91%A8%E6%8A%A5/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://jiang07shuai06.github.io/source/tags/demo/"}]},{"title":"Hexo+Github==>个人博客","slug":"Hexo-Github-个人博客","date":"2024-10-20T08:17:35.000Z","updated":"2024-10-26T02:30:07.425Z","comments":true,"path":"2024/10/20/Hexo-Github-个人博客/","permalink":"https://jiang07shuai06.github.io/2024/10/20/Hexo-Github-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"这篇文章是对于使用 hexo 和 github 搭建个人博客的思路梳理1、下载 node.jshttps://nodejs.org/zh-cn 2、下载 githttps://git-scm.com/downloads 验证是否下载成功，管理员运行 cmd 输入以下三条命令 123node -vnpm -vgit -v 3、下载 hexo1npm install hexo-cli -g 4、搭建仓库名称格式：仓库名称.github.io 勾选 Public 勾选 Add a README file 拉到下面点击 create 创建 5、生成SSH Keys进入任意文件夹，右键空白处然后点Git bash here,输入 1ssh-keygen -t rsa -C &quot;邮件地址&quot; 然后敲4次Enter⌨️然后进入C:\\Users\\用户名，在里面进入.ssh文件用记事本打开里面的id_rsa.pub,全选复制里面的代码然后打开github进入用户设置，找到SSH keys新建SSH keys，名称随意，在下面粘贴代码，然后创建测试是否成功在git bash中输入 1ssh -T git@github.com 回车，然后再输入 yes 6、本地部署在喜欢位置新建文件Blog，然后进入文件夹右键空白处然后点 Git bash here，输入 1hexo init 然后依次输入 12hexo g # 生成hexo s # 预览 （如果不成功的话就重复直到成功，因为国内与github连接不稳定）现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了然后回到命令行，ctrl+c 关闭 7、上线博客进入之前的Blog文件夹，用记事本打开_config.yml编辑 url 段落 123# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://Jiang07Shuai06.github.io 拉到最下面将deploy后面的全删掉，复制粘贴这段 123type: gitrepository: branch: main 注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！去 github 之前生成的仓库页面，点 code，复制 https链接将其粘贴到我们记事本中的 repository：后面然后保存退出回到博客文件夹，git bash安装自动部署发布工具 1npm install hexo-deployer-git --save 然后在Blog文件夹右键打开git bash，依次输入 12hexo g # 生成hexo d # 上传 如果是第一次使用git的话会需要配置git config --global user.email &quot;你的邮箱&quot;git config --global user.name &quot;你的名字&quot;配置完后再 hexo d 上传在跳出来的窗口内进行登录接下来我们就成功把本地内容上传到github了上传成功以后，我们就算搭建好了！上自己的网址看看吧网址是我们之前设的仓库名：用户名.github.io 文章参考🔗：https://blog.fiveth.cc/p/bb32/#%E5%87%86%E5%A4%87%E5%B7%A5%E5%85%B7","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://jiang07shuai06.github.io/source/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"QWQ","slug":"QWQ","date":"2024-10-12T03:20:16.000Z","updated":"2024-10-26T02:33:09.853Z","comments":true,"path":"2024/10/12/QWQ/","permalink":"https://jiang07shuai06.github.io/2024/10/12/QWQ/","excerpt":"","text":"这两天放假，闲来无事对博客进行重构，结果遇到了好多知识盲区，虽然被打击了，但我还是非常开心，让我明白23年的时候，前辈和我说的：”只要代码可以正常跑，就不要自作聪明去优化它“😭😭 马上要进击 Docker 啦，加油加油⛷️⛷️","categories":[{"name":"生活感悟","slug":"生活感悟","permalink":"https://jiang07shuai06.github.io/source/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"QWQ","slug":"QWQ","permalink":"https://jiang07shuai06.github.io/source/tags/QWQ/"}],"author":"byte76"},{"title":"正则表达式","slug":"regex","date":"2024-10-10T03:36:35.000Z","updated":"2024-10-26T02:33:57.502Z","comments":true,"path":"2024/10/10/regex/","permalink":"https://jiang07shuai06.github.io/2024/10/10/regex/","excerpt":"","text":"1、锚点^ 匹配字符串或行的开头$ 匹配字符串或行的末尾\\b 匹配单词的开头或末尾\\B 匹配不在单词的开头或末尾的位置 2、字符类[abc] 字符集，匹配集合中的任意字符[^abc] 反选字符集，匹配不在集合中的任意字符[a-z] 匹配两个字符之间的任意字符，包括它们本身. 匹配除换行符之外的任意字符\\w 匹配字母、数字或下划线\\W 匹配除字母、数字或下划线之外的任意字符\\d 匹配所有数字\\D 匹配除数字外的任意字符\\s 匹配所有空白字符\\S 匹配除空白字符以外的任意字符 3、量词与分支‘+’ 表达式匹配一个或多个‘*’ 表达式匹配零个或多个{n} 表达式匹配恰好出现 n 次的元素{n,} 表达h式匹配至少出现 n 次的元素{n,m} 表达式匹配 n 到 m 次的元素? 使用表达式可选| 类似于“或”，用于匹配多种符合条件的表达式之一 4、零宽断言(?&#x3D;) 正向先行断言(?!) 负向先行断言(?&lt;&#x3D;) 正向后行断言(?&lt;!) 负向后行断言 5、标志i 使表达式忽略大小写g 确保表达式不会在检索到第一个匹配项时停止m 如果不启用，”^”和”$”只匹配整个字符串的开始和结束，而不会单独匹配每一行 6、组和引用( ) 使表达式分组\\1 引用表达式的分组(?:) 创建无法引用的分组 扩展： sed（流编辑器）中的模式空间和保存空间 模式空间（Pattern Space） 就像是一个临时的工作区。当 sed 处理一行文本时，会把这一行内容放到模式空间里。然后在这个模式空间中对这行文本进行各种操作，比如替换、删除、打印等。 保持空间（Hold Space） 这是一个额外的存储区域。你可以把一些内容从模式空间复制到保持空间进行暂存，或者从保持空间把内容取回模 式空间进行进一步处理。比如你在处理一个文件时，遇到一些特殊的行想先保存起来，等处理到后面的时候再拿出 来用，就可以把这些行放到保持空间","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://jiang07shuai06.github.io/source/tags/Shell/"}]},{"title":"天气预报自动推送","slug":"weather-report","date":"2024-10-07T09:29:17.000Z","updated":"2024-10-26T02:34:44.175Z","comments":true,"path":"2024/10/07/weather-report/","permalink":"https://jiang07shuai06.github.io/2024/10/07/weather-report/","excerpt":"","text":"一、申请微信测试公众号（https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login） 获取到这四个值 appID, appSecret, openId, template_id 想让谁收消息，谁就用微信扫二维码，刷新页面后即出现在用户列表，获取微信号（openId） 新增测试模板获得 template_id（模板ID） 天气模板： 123456今天：&#123;&#123;date.DATA&#125;&#125;地区：&#123;&#123;region.DATA&#125;&#125;天气：&#123;&#123;weather.DATA&#125;&#125;气温：&#123;&#123;temp.DATA&#125;&#125;风向：&#123;&#123;wind_dir.DATA&#125;&#125;对你说的话：&#123;&#123;today_note.DATA&#125;&#125; 课程表模板： 1消息：&#123;&#123;message.DATA&#125;&#125; 二、配置代码 将上面获得的几个值填入代码这几行，启动即可 12345678appID = &quot;&quot;appSecret = &quot;&quot;#收信人ID即 用户列表中的微信号，见上文openId = &quot;&quot;# 天气预报模板IDweather_template_id = &quot;&quot;# 时间表模板IDtimetable_template_id = &quot;&quot; 定时任务（根据需求进行修改这几行） 12345schedule.every().day.at(&quot;08:00&quot;).do(weather_report, &quot;北京&quot;)# schedule.every().monday.at(&quot;13:30&quot;).do(timetable, &quot;还有15分钟开始下午的课程&quot;)while True: schedule.run_pending() time.sleep(1) 完成代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166# 安装依赖 pip3 install requests html5lib bs4 scheduleimport timeimport requestsimport jsonimport schedulefrom bs4 import BeautifulSoup# 从测试号信息获取appID = &quot;wx1c904b832908e3d7&quot;appSecret = &quot;024e7a99b9bd93e4ec2ba0e61cb99869&quot;#收信人ID即 用户列表中的微信号，见上文openId = &quot;oLg156sEhzpHX3f6OKG6HaCTid9s&quot;# 天气预报模板IDweather_template_id = &quot;T00eYDomN3GOBXOTqTYhX27Nqp-vCdDO2xHKAK1ElH8&quot;# 时间表模板IDtimetable_template_id = &quot;kg29LwRP6--uo6Xq3mm-aRyJFaF_Pe2SsnUjYq23YpA&quot;def get_weather(my_city): urls = [&quot;http://www.weather.com.cn/textFC/hb.shtml&quot;, &quot;http://www.weather.com.cn/textFC/db.shtml&quot;, &quot;http://www.weather.com.cn/textFC/hd.shtml&quot;, &quot;http://www.weather.com.cn/textFC/hz.shtml&quot;, &quot;http://www.weather.com.cn/textFC/hn.shtml&quot;, &quot;http://www.weather.com.cn/textFC/xb.shtml&quot;, &quot;http://www.weather.com.cn/textFC/xn.shtml&quot; ] for url in urls: resp = requests.get(url) text = resp.content.decode(&quot;utf-8&quot;) soup = BeautifulSoup(text, &#x27;html5lib&#x27;) div_conMidtab = soup.find(&quot;div&quot;, class_=&quot;conMidtab&quot;) tables = div_conMidtab.find_all(&quot;table&quot;) for table in tables: trs = table.find_all(&quot;tr&quot;)[2:] for index, tr in enumerate(trs): tds = tr.find_all(&quot;td&quot;) # 这里倒着数，因为每个省会的td结构跟其他不一样 city_td = tds[-8] this_city = list(city_td.stripped_strings)[0] if this_city == my_city: high_temp_td = tds[-5] low_temp_td = tds[-2] weather_type_day_td = tds[-7] weather_type_night_td = tds[-4] wind_td_day = tds[-6] wind_td_day_night = tds[-3] high_temp = list(high_temp_td.stripped_strings)[0] low_temp = list(low_temp_td.stripped_strings)[0] weather_typ_day = list(weather_type_day_td.stripped_strings)[0] weather_type_night = list(weather_type_night_td.stripped_strings)[0] wind_day = list(wind_td_day.stripped_strings)[0] + list(wind_td_day.stripped_strings)[1] wind_night = list(wind_td_day_night.stripped_strings)[0] + list(wind_td_day_night.stripped_strings)[1] # 如果没有白天的数据就使用夜间的 temp = f&quot;&#123;low_temp&#125;——&#123;high_temp&#125;摄氏度&quot; if high_temp != &quot;-&quot; else f&quot;&#123;low_temp&#125;摄氏度&quot; weather_typ = weather_typ_day if weather_typ_day != &quot;-&quot; else weather_type_night wind = f&quot;&#123;wind_day&#125;&quot; if wind_day != &quot;--&quot; else f&quot;&#123;wind_night&#125;&quot; return this_city, temp, weather_typ, winddef get_access_token(): # 获取access token的url url = &#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#123;&#125;&amp;secret=&#123;&#125;&#x27; \\ .format(appID.strip(), appSecret.strip()) response = requests.get(url).json() print(response) access_token = response.get(&#x27;access_token&#x27;) return access_tokendef get_daily_love(): # 每日一句情话 url = &quot;https://api.lovelive.tools/api/SweetNothings/Serialization/Json&quot; r = requests.get(url) all_dict = json.loads(r.text) sentence = all_dict[&#x27;returnObj&#x27;][0] daily_love = sentence return daily_lovedef send_weather(access_token, weather): # touser 就是 openID # template_id 就是模板ID # url 就是点击模板跳转的url # data就按这种格式写，time和text就是之前&#123;&#123;time.DATA&#125;&#125;中的那个time，value就是你要替换DATA的值 import datetime today = datetime.date.today() today_str = today.strftime(&quot;%Y年%m月%d日&quot;) body = &#123; &quot;touser&quot;: openId.strip(), &quot;template_id&quot;: weather_template_id.strip(), &quot;url&quot;: &quot;https://weixin.qq.com&quot;, &quot;data&quot;: &#123; &quot;date&quot;: &#123; &quot;value&quot;: today_str &#125;, &quot;region&quot;: &#123; &quot;value&quot;: weather[0] &#125;, &quot;weather&quot;: &#123; &quot;value&quot;: weather[2] &#125;, &quot;temp&quot;: &#123; &quot;value&quot;: weather[1] &#125;, &quot;wind_dir&quot;: &#123; &quot;value&quot;: weather[3] &#125;, &quot;today_note&quot;: &#123; &quot;value&quot;: get_daily_love() &#125; &#125; &#125; url = &#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#123;&#125;&#x27;.format(access_token) print(requests.post(url, json.dumps(body)).text)def send_timetable(access_token, message): body = &#123; &quot;touser&quot;: openId, &quot;template_id&quot;: timetable_template_id.strip(), &quot;url&quot;: &quot;https://weixin.qq.com&quot;, &quot;data&quot;: &#123; &quot;message&quot;: &#123; &quot;value&quot;: message &#125;, &#125; &#125; url = &#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#123;&#125;&#x27;.format(access_token) print(requests.post(url, json.dumps(body)).text)def weather_report(city): # 1.获取access_token access_token = get_access_token() # 2. 获取天气 weather = get_weather(city) print(f&quot;天气信息： &#123;weather&#125;&quot;) # 3. 发送消息 send_weather(access_token, weather)def timetable(message): # 1.获取access_token access_token = get_access_token() # 3. 发送消息 send_timetable(access_token, message)if __name__ == &#x27;__main__&#x27;: weather_report(&quot;河北&quot;) # timetable(&quot;第二教学楼十分钟后开始英语课&quot;) # schedule.every().day.at(&quot;08:00&quot;).do(weather_report, &quot;北京&quot;) # schedule.every().monday.at(&quot;13:30&quot;).do(timetable, &quot;还有15分钟开始下午的课程&quot;) #while True: # schedule.run_pending() # time.sleep(1) 原创文档链接：https://www.bilibili.com/read/cv28928153/ 原创视频链接：https://www.bilibili.com/video/BV1Ng4y1r7EP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=576ff0210b33e8823a0a538d3f79f11f","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://jiang07shuai06.github.io/source/tags/Python/"}]},{"title":"外星人入侵","slug":"alien-invasion","date":"2024-10-04T11:05:33.000Z","updated":"2024-10-26T02:30:49.441Z","comments":true,"path":"2024/10/04/alien-invasion/","permalink":"https://jiang07shuai06.github.io/2024/10/04/alien-invasion/","excerpt":"","text":"遇到的问题及注意事项： 编写计分模块 scoreborad.py 时，变量引用错误，没搞清楚使用的是值传递还是引用传递 参考链接 https://blog.csdn.net/hohaizx/article/details/78427406 飞船数量与设置模块 settings.py 中的飞船设置相关 外星人、子弹、飞船移动速度以及幅度与设置模块 settings.py 中的 initialize_dynamic_settings 函数设置相关 参考资料及源码： 参考书籍《Python编程——从入门到实践》 参考教程链接 https://www.modb.pro/db/49581 通过百度网盘分享的文件：alien_invasion_2.0.zip 链接：https://pan.baidu.com/s/1NTkG7Mk_5sw4uzQLVU8ieQ?pwd=byte 提取码：byte","categories":[{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://jiang07shuai06.github.io/source/tags/Python/"}]},{"title":"monthly_report_240929","slug":"monthly-report-240929","date":"2024-09-29T01:04:32.000Z","updated":"2024-10-26T02:31:54.507Z","comments":true,"path":"2024/09/29/monthly-report-240929/","permalink":"https://jiang07shuai06.github.io/2024/09/29/monthly-report-240929/","excerpt":"","text":"这篇月报将会分为四部分进行阐述 回顾9月学习内容 遇到的问题分析 解决方法与教训 10月的大致规划 一、9月回顾关于Linux系统（CentOS、Ubuntu）有了夯实的基础，掌握了磁盘和文件系统的管理、进程和计划任务管理、用户账号和权限管理，可以搭建如DNS、DHCP、NFS、Rsync、FTP等等服务，目前已经展开了对Shell脚本的学习……； 在课外学习Python语言的类和实例对象、模块导入及引用其类、函数，开始编写第一个项目——《外星人入侵》游戏 二、问题分析 搞错了rsync和sersync谁是数据源谁是备份数据源的对应关系，并对实时同步产生了新的理解； 编写”飞船“时，修改了飞船的初始位置，但在后面又将其设置为了初始值，导致无法左右持续移动； 1234567891011def update(self): &quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot; # 更新飞船的属性x的值，而不是其外接矩形的属性x的值 if self.moving_right and self.rect.right &lt; self.screen_rect.right: self.rect.x += self.settings.ship_speed if self.moving_left and self.rect.left &gt; 0: self.rect.x -= self.settings.ship_speed # 不需要再将self.rect.x设置为self.x，因为self.x没有在其他地方更新 # self.rect.x = self.x 对于函数、类、模块、方法、属性概念性的知识以及中间的关联不够清晰 在这段时间中，发现自己的专注力有一个时间点，一般为上午2至3小时，下午3至5小时，一旦超过自己的专注时间再就很难学进去； 会因为外界的声音产生一些焦虑和不安，但又会时常感性，觉得世事无常，最不确定的事情总是那些已经确定了的事情。 三、解决方法 rsync是一个远程数据同步工具，它通过比较源和目标文件的修改时间、大小等信息来决定哪些文件需要被同步，而sersync是基于rsync开发的一款工具，通过内核的inotify机制来监控文件系统的事件（如文件的创建、修改、删除等）一旦检测到文件系统有变化，就立即触发rsync命令来进行数据通过，这样就可以做到实时同步，其中sersync作为数据源，而rsync则是备份方 注：如果要让两者的身份进行互换，则可以在rsync端通过执行命令将本地文件发送到目标rsync端（也就是sersync端） 将其冲突的属性进行注释保留 函数：函数是一段可重复使用的代码块，用于执行特定的任务。它接受输入参数（可以是零个或多个），并根据这些参数执行一系列操作，最后可能返回一个结果（也可以不返回任何结果，即返回值为None） 123def add_numbers(a, b): return a + b# 这个add_numbers函数接受两个参数a和b，将它们相加并返回结果 函数可以独立存在，也可以作为类中的方法存在（后面会详细介绍方法）。在模块中，函数是基本的代码组织单元，可以被其他函数、类或模块调用。 类：类是一种抽象的数据类型，用于创建对象（实例）。它定义了一组属性（描述对象的特征）和方法（描述对象的行为） 12345678class Person: def __init__(self, name, age): self.name = name self.age = age def introduce(self): return f&quot;My name is &#123;self.name&#125; and I&#x27;m &#123;self.age&#125; years old.&quot;# 这里Person类有name和age两个属性，以及introduce方法 类可以包含多个函数（方法），这些方法用于操作类的属性或者执行与类相关的操作。类是对象 - 面向对象编程（OOP）的核心概念，通过实例化类可以创建多个具有相同属性和方法定义的对象。类可以被组织在模块中。 模块：模块是一个包含 Python 定义和语句的文件，其文件名就是模块名（去掉.py扩展名）。模块用于组织代码，将相关的函数、类等代码组织在一起，方便代码的管理、复用和维护。 123# my_module.pydef add_numbers(a, b): return a + b 模块可以包含多个函数、类等代码元素。一个模块中的函数或类可以被其他模块导入并使用。这有助于将大型项目分解成多个小的、可管理的部分，提高代码的可读性和可维护性。 方法：方法是定义在类内部的函数，它与类的实例（对象）相关联。方法可以访问和操作类的属性，并且第一个参数通常是self（在 Python 中），用于指代调用该方法的对象实例。 例如，前面Person类中的introduce方法就是一个类方法，它通过self访问name和age属性。 12345678910111213class Person: def __init__(self, name, age): self.name = name self.age = age def introduce(self): return f&quot;My name is &#123;self.name&#125; and I&#x27;m &#123;self.age&#125; years old.&quot;# 创建Person类的实例person1 = Person(&quot;Alice&quot;, 25)# 调用introduce方法并打印结果print(person1.introduce()) 方法是类的重要组成部分，它依赖于类的定义存在。不同的类可以有相同名称的方法，但它们的功能可能因类的属性和逻辑不同而有所差异。 属性：属性是与类或对象相关联的数据值。在类中，属性可以在类的内部定义，通过实例化类后，对象就拥有了这些属性。属性可以是简单的数据类型（如整数、字符串等），也可以是复杂的数据结构（如列表、字典等）。 在前面的Person类中，name和age就是属性。 属性是类和对象的状态描述。类的方法通常会操作这些属性来实现特定的功能。属性的值可以在类的方法中被修改，也可以在对象创建时进行初始化。 调整学习时间，在无法专注的时候去做一些简单轻松可以完成的事情，驱使自己去做一些感兴趣的爱好 时间是最好的答案⛷️ 四、10月规划 首先是对于10月1假期要完成的列表 完成正在编写的 Python小游戏——《外星人入侵》 预习shell脚本实战 备战10月19、20日的学历考试 [^CHEER ON]:","categories":[{"name":"月报","slug":"月报","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%9C%88%E6%8A%A5/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://jiang07shuai06.github.io/source/tags/demo/"}]},{"title":"weekly_report_240920","slug":"weekly-report-240920","date":"2024-09-20T02:34:41.000Z","updated":"2024-10-26T02:35:37.406Z","comments":true,"path":"2024/09/20/weekly-report-240920/","permalink":"https://jiang07shuai06.github.io/2024/09/20/weekly-report-240920/","excerpt":"","text":"对于本月的前三周学习成果以及个人状态做出的总结与反省课内学习： Linux操作系统安装及服务控制 Linux-CentOS常用命令 Linux安装软件包 账号和权限管理 磁盘和文件系统管理 进程和计划任务管理 系统启动流程、分析日志文件和检查系统故障 Linux基础网络设置 ftp文件传输服务 DNS域名解析服务 sshd服务搭建管理 nginx网络服务基础 在实验操作过程当中，关于进程和系统日志类别需要再进一步巩固，在搭建DNS服务时遇到了因软件包版本不同而失败的问题，搭建nginx遇到了DNS解析问题。解决方法：针对进程和日志类别总结了一份word，dns服务器则更换了软件包版本-win，nginx通过在本地的hosts文件中添加对应的dns主机解析-win。 课外学习：对python中的类有了基础的了解和掌握 其一，是__init__方法 含义：一个特殊的方法，叫做构造方法。当一个类的实例被创建时，__init__方法会自动被调用，用于初始化这个实例的属性。 作用：设置对象的初始状态，比如可以再这个方法中接受参数，为对象的属性赋值。 12345class Person: def __init__(self, name, age): self.name = name self.age = age&#x27;&#x27;&#x27; 在这个例子中，当创建一个Person类的实例时，__init__方法会接收name和age两个参数，并将它们分别赋值给实例的name和age属性。&#x27;&#x27;&#x27; 其二，是 self 参数 含义：self代表类的实例（对象）本身。在类的方法中，必须要有一个参数代表实例对象，这个参数通常被命名为self。 作用：通过self可以访问和操作实例的属性与方法。 12345678class Person: def __init__(self, name, age): self.name = name self.age = age def introduce(self): print(f&quot;Hello, I am &#123;self.name&#125; and I am &#123;self.age&#125; years old.&quot;)&#x27;&#x27;&#x27; 在introduce方法中，通过self.name和self.age访问了实例的属性，并打印出相应的信息。当调用这个方法时，实际上是在操作特定的实例对象。&#x27;&#x27;&#x27; 个人状态方面：9月9日凌晨，错过一位喜欢了很久的姑娘，时常会感到惋惜……，但是这并不会成为终章⛷️⛷️😎","categories":[{"name":"周报","slug":"周报","permalink":"https://jiang07shuai06.github.io/source/categories/%E5%91%A8%E6%8A%A5/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://jiang07shuai06.github.io/source/tags/demo/"}]},{"title":"自省计划","slug":"2024-09-18","date":"2024-09-18T02:15:20.000Z","updated":"2024-10-26T02:27:10.856Z","comments":true,"path":"2024/09/18/2024-09-18/","permalink":"https://jiang07shuai06.github.io/2024/09/18/2024-09-18/","excerpt":"","text":"每三周进行一次不计字数的总结与反省周报 每个月的月底上传至博客一篇月报","categories":[{"name":"样本","slug":"样本","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%A0%B7%E6%9C%AC/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://jiang07shuai06.github.io/source/tags/demo/"}]},{"title":"第一篇文章","slug":"test","date":"2024-08-31T01:00:00.000Z","updated":"2024-10-26T02:34:17.428Z","comments":true,"path":"2024/08/31/test/","permalink":"https://jiang07shuai06.github.io/2024/08/31/test/","excerpt":"","text":"&#x2F;&#x2F; 测试12345上山打老虎","categories":[{"name":"样本","slug":"样本","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%A0%B7%E6%9C%AC/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://jiang07shuai06.github.io/source/tags/%E6%B5%8B%E8%AF%95/"}],"author":"byte76"}],"categories":[{"name":"月报","slug":"月报","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%9C%88%E6%8A%A5/"},{"name":"技术分享","slug":"技术分享","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"},{"name":"周报","slug":"周报","permalink":"https://jiang07shuai06.github.io/source/categories/%E5%91%A8%E6%8A%A5/"},{"name":"生活感悟","slug":"生活感悟","permalink":"https://jiang07shuai06.github.io/source/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"},{"name":"样本","slug":"样本","permalink":"https://jiang07shuai06.github.io/source/categories/%E6%A0%B7%E6%9C%AC/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://jiang07shuai06.github.io/source/tags/demo/"},{"name":"Docker","slug":"Docker","permalink":"https://jiang07shuai06.github.io/source/tags/Docker/"},{"name":"博客","slug":"博客","permalink":"https://jiang07shuai06.github.io/source/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"QWQ","slug":"QWQ","permalink":"https://jiang07shuai06.github.io/source/tags/QWQ/"},{"name":"Shell","slug":"Shell","permalink":"https://jiang07shuai06.github.io/source/tags/Shell/"},{"name":"Python","slug":"Python","permalink":"https://jiang07shuai06.github.io/source/tags/Python/"},{"name":"测试","slug":"测试","permalink":"https://jiang07shuai06.github.io/source/tags/%E6%B5%8B%E8%AF%95/"}]}