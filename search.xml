<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Github==&gt;个人博客</title>
    <url>/2024/10/20/Hexo-Github-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="这篇文章是对于使用-hexo-和-github-搭建个人博客的思路梳理"><a href="#这篇文章是对于使用-hexo-和-github-搭建个人博客的思路梳理" class="headerlink" title="这篇文章是对于使用 hexo 和 github 搭建个人博客的思路梳理"></a>这篇文章是对于使用 hexo 和 github 搭建个人博客的思路梳理</h3><h4 id="1、下载-node-js"><a href="#1、下载-node-js" class="headerlink" title="1、下载 node.js"></a>1、下载 node.js</h4><p><a class="link"   href="https://nodejs.org/zh-cn" >https://nodejs.org/zh-cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="2、下载-git"><a href="#2、下载-git" class="headerlink" title="2、下载 git"></a>2、下载 git</h4><p><a class="link"   href="https://git-scm.com/downloads" >https://git-scm.com/downloads<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>验证是否下载成功，管理员运行 cmd 输入以下三条命令</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git -v</span><br></pre></td></tr></table></figure></div>

<h4 id="3、下载-hexo"><a href="#3、下载-hexo" class="headerlink" title="3、下载 hexo"></a>3、下载 hexo</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></div>

<h4 id="4、搭建仓库"><a href="#4、搭建仓库" class="headerlink" title="4、搭建仓库"></a>4、搭建仓库</h4><p>名称格式：<code>仓库名称.github.io</code></p>
<p>勾选 Public</p>
<p>勾选 Add a README file</p>
<p>拉到下面点击 create 创建</p>
<h4 id="5、生成SSH-Keys"><a href="#5、生成SSH-Keys" class="headerlink" title="5、生成SSH Keys"></a>5、生成SSH Keys</h4><p>进入任意文件夹，右键空白处然后点Git bash here,输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>然后敲4次Enter⌨️<br>然后进入C:\Users\用户名，在里面进入.ssh文件<br>用记事本打开里面的id_rsa.pub,全选复制里面的代码<br>然后打开github<br>进入用户设置，找到SSH keys<br>新建SSH keys，名称随意，在下面粘贴代码，<br>然后创建<br>测试是否成功<br>在git bash中输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>

<p>回车，然后再输入 yes</p>
<h4 id="6、本地部署"><a href="#6、本地部署" class="headerlink" title="6、本地部署"></a>6、本地部署</h4><p>在喜欢位置新建文件Blog，然后进入文件夹<br>右键空白处然后点 Git bash here，输入</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></div>

<p>然后依次输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g	<span class="comment"># 生成</span></span><br><span class="line">hexo s	<span class="comment"># 预览</span></span><br></pre></td></tr></table></figure></div>

<p>（如果不成功的话就重复直到成功，因为国内与github连接不稳定）<br>现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了<br>然后回到命令行，ctrl+c 关闭</p>
<h4 id="7、上线博客"><a href="#7、上线博客" class="headerlink" title="7、上线博客"></a>7、上线博客</h4><p>进入之前的Blog文件夹，用记事本打开_config.yml<br>编辑 url 段落</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line">url: https://Jiang07Shuai06.github.io</span><br></pre></td></tr></table></figure></div>

<p>拉到最下面将deploy后面的全删掉，复制粘贴这段</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repository: </span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure></div>

<p>注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！<br>去 github 之前生成的仓库页面，点 code，复制 https链接<br>将其粘贴到我们记事本中的 repository：后面<br>然后保存退出<br>回到博客文件夹，git bash<br>安装自动部署发布工具</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<p>然后在Blog文件夹右键打开git bash，依次输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g	<span class="comment"># 生成</span></span><br><span class="line">hexo d	<span class="comment"># 上传</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果是第一次使用git的话会需要配置<br><code>git config --global user.email &quot;你的邮箱&quot;</code><br><code>git config --global user.name &quot;你的名字&quot;</code><br>配置完后再 hexo d 上传<br>在跳出来的窗口内进行登录<br>接下来我们就成功把本地内容上传到github了<br>上传成功以后，我们就算搭建好了！上自己的网址看看吧<br>网址是我们之前设的仓库名：<code>用户名.github.io</code></p>
</blockquote>
<p>文章参考🔗：<a class="link"   href="https://blog.fiveth.cc/p/bb32/#%E5%87%86%E5%A4%87%E5%B7%A5%E5%85%B7" >https://blog.fiveth.cc/p/bb32/#%E5%87%86%E5%A4%87%E5%B7%A5%E5%85%B7<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>QWQ</title>
    <url>/2024/10/12/QWQ/</url>
    <content><![CDATA[<p>这两天放假，闲来无事对博客进行重构，结果遇到了好多知识盲区，虽然被打击了，但我还是非常开心，让我明白23年的时候，前辈和我说的：”<code>只要代码可以正常跑，就不要自作聪明去优化它</code>“😭😭</p>
<hr>
<p>马上要进击 Docker 啦，加油加油⛷️⛷️</p>
]]></content>
      <categories>
        <category>生活感悟</category>
      </categories>
      <tags>
        <tag>QWQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自省计划</title>
    <url>/2024/09/18/2024-09-18/</url>
    <content><![CDATA[<ul>
<li>每三周进行一次不计字数的总结与反省周报  </li>
<li>每个月的月底上传至博客一篇月报</li>
</ul>
]]></content>
      <categories>
        <category>样本</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s-部署</title>
    <url>/2024/11/02/K8s-%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="笔记链接🔗"><a href="#笔记链接🔗" class="headerlink" title="笔记链接🔗"></a>笔记链接🔗</h2><p><a class="link"   href="https://ocns4u1yk5x3.feishu.cn/docx/Atu0dHwO1orlQQxSzc7cf5R4nuE?from=from_copylink" >https://ocns4u1yk5x3.feishu.cn/docx/Atu0dHwO1orlQQxSzc7cf5R4nuE?from=from_copylink<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Dockerfile</title>
    <url>/2024/10/26/docker-dockerfile/</url>
    <content><![CDATA[<h2 id="笔记链接🔗："><a href="#笔记链接🔗：" class="headerlink" title="笔记链接🔗："></a>笔记链接🔗：</h2><p><a class="link"   href="https://ocns4u1yk5x3.feishu.cn/docx/L3wrdyakXojtfKxm0QAcUxPknzT?from=from_copylink" >https://ocns4u1yk5x3.feishu.cn/docx/L3wrdyakXojtfKxm0QAcUxPknzT?from=from_copylink<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-镜像</title>
    <url>/2024/10/26/docker-image/</url>
    <content><![CDATA[<h2 id="笔记链接🔗："><a href="#笔记链接🔗：" class="headerlink" title="笔记链接🔗："></a>笔记链接🔗：</h2><p><a class="link"   href="https://ocns4u1yk5x3.feishu.cn/docx/GvcBdYAbtodEwsxOsktclbD4nRc?from=from_copylink" >https://ocns4u1yk5x3.feishu.cn/docx/GvcBdYAbtodEwsxOsktclbD4nRc?from=from_copylink<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-安装</title>
    <url>/2024/11/16/MySQL-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="我的-CSDN-链接🔗"><a href="#我的-CSDN-链接🔗" class="headerlink" title="我的 CSDN 链接🔗"></a>我的 CSDN 链接🔗</h2><p><a class="link"   href="https://blog.csdn.net/CSDN_JS11/article/details/143788766" >https://blog.csdn.net/CSDN_JS11/article/details/143788766<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>数据库-MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>外星人入侵</title>
    <url>/2024/10/04/alien-invasion/</url>
    <content><![CDATA[<h4 id="遇到的问题及注意事项："><a href="#遇到的问题及注意事项：" class="headerlink" title="遇到的问题及注意事项："></a>遇到的问题及注意事项：</h4><ul>
<li><p>编写计分模块 <code>scoreborad.py</code> 时，变量引用错误，没搞清楚使用的是值传递还是引用传递</p>
<p>  参考链接  <a class="link"   href="https://blog.csdn.net/hohaizx/article/details/78427406" >https://blog.csdn.net/hohaizx/article/details/78427406<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>飞船数量与设置模块 <code>settings.py</code> 中的飞船设置相关</p>
</li>
<li><p>外星人、子弹、飞船移动速度以及幅度与设置模块 <code>settings.py</code> 中的 <code>initialize_dynamic_settings</code> 函数设置相关</p>
</li>
</ul>
<h4 id="参考资料及源码："><a href="#参考资料及源码：" class="headerlink" title="参考资料及源码："></a>参考资料及源码：</h4><ol>
<li><p>参考书籍《Python编程——从入门到实践》</p>
</li>
<li><p>参考教程链接  <a class="link"   href="https://www.modb.pro/db/49581" >https://www.modb.pro/db/49581<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>通过百度网盘分享的文件：alien_invasion_2.0.zip</p>
<p> 链接：<a class="link"   href="https://pan.baidu.com/s/1NTkG7Mk_5sw4uzQLVU8ieQ?pwd=byte" >https://pan.baidu.com/s/1NTkG7Mk_5sw4uzQLVU8ieQ?pwd=byte<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> </p>
<p> 提取码：byte</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-网络</title>
    <url>/2024/10/26/docker-network/</url>
    <content><![CDATA[<h2 id="笔记链接🔗："><a href="#笔记链接🔗：" class="headerlink" title="笔记链接🔗："></a>笔记链接🔗：</h2><p><a class="link"   href="https://ocns4u1yk5x3.feishu.cn/docx/VkmzdDWBEomJucxjUqHcYc3knmg?from=from_copylink" >https://ocns4u1yk5x3.feishu.cn/docx/VkmzdDWBEomJucxjUqHcYc3knmg?from=from_copylink<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s-概述</title>
    <url>/2024/11/02/K8s-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="笔记链接🔗"><a href="#笔记链接🔗" class="headerlink" title="笔记链接🔗"></a>笔记链接🔗</h2><p><a class="link"   href="https://ocns4u1yk5x3.feishu.cn/docx/ITw7dXoctoUaaXxEfjIcSNU2nVc?from=from_copylink" >https://ocns4u1yk5x3.feishu.cn/docx/ITw7dXoctoUaaXxEfjIcSNU2nVc?from=from_copylink<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-容器</title>
    <url>/2024/10/26/docker-%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h4 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h4><p>Docker利用容器来运行应用。容器是从镜像创建的运行实例，它可以被启动、开始、停止、 删除。每个容器都是相互隔离的、保证安全的平台，每个应用运行在隔离的容器中，享用独自的权限，用户，网络。确保安全与互相干扰。</p>
<blockquote>
<p>注：镜像是只读的，容器在启动的时候创建一层可写层作为最上层。镜像是只读的，不可以修改，但是容器层是rw的，提供给用户操作<br>镜像image与容器Container区别：镜像是静态的，不会运行。容器则是动态的，有生命周期</p>
</blockquote>
<h5 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h5><p>docker run 是启动容器的方法。在讨论 Dockerfile 时我们已经学习到，可用三种方式指定容器启动时执行的命令：<br>(1) CMD指令。<br>(2) ENTRYPOINT 指令。<br>(3)在docker run 命令行中指定</p>
<h5 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h5><p>我们经常需要进到容器里去做一些工作，比如查看日志、调试、启动其他进程等。有两种方法进入容器：attach 和 exec</p>
<blockquote>
<p>stop&#x2F;start&#x2F;restart 容器</p>
</blockquote>
<h4 id="pause-unpause-容器"><a href="#pause-unpause-容器" class="headerlink" title="pause&#x2F;unpause 容器"></a>pause&#x2F;unpause 容器</h4><p>有时我们只是希望暂时让容器暂停工作一段时间，比如要对容器的文件系统打个快照，或者 dcoker host 需要使用 CPU，这时可以执行 docker pause 。<br>处于暂停状态的容器不会占用 CPU 资源，直到通过 docker unpause 恢复运行</p>
<h4 id="容器导入和导出"><a href="#容器导入和导出" class="headerlink" title="容器导入和导出"></a>容器导入和导出</h4><p>导出容器<br>docker export [容器 id] &gt; [导出文件]<br>如果要导出本地某个容器，可以使用docker export 命令，这样将导出容器快照到本地文件<br>导入容器<br>docker import [导入文件] [ REPOSITORY : TAG ]<br>可以使用 docker import 从容器快照文件中再导入为镜像</p>
<h4 id="查看容器的信息"><a href="#查看容器的信息" class="headerlink" title="查看容器的信息"></a>查看容器的信息</h4><p>用docker  inspect查看容器的信息，命令格式：docker  inspect  容器ID或容器名<br>用docker  inspect查看容器的ip地址</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect -f <span class="string">&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;</span> &lt;容器名称&gt;</span><br></pre></td></tr></table></figure></div>

<p>用docker  inspect查看容器执行的程序</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect -f <span class="string">&#x27;&#123;&#123;.Config.Cmd&#125;&#125;&#x27;</span> &lt;容器名称&gt;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-安装</title>
    <url>/2024/10/26/docker-install/</url>
    <content><![CDATA[<h4 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h4><p>分别使用了centos、Rocky、OpenEuler进行安装，具体流程如下：</p>
<h5 id="1、前言："><a href="#1、前言：" class="headerlink" title="1、前言："></a>1、前言：</h5><p>Docker 常见的安装方式有两种： 操作系统发行版安装包（RPM、Deb，在线安装时常用的建议方式，本文选用）；二进制安装包（适用于离线部署、集成定制化部署）<br>采用操作系统发行版安装包方案时，也有两种方式可选： 利用官方脚本，自动安装配置（适用于网络不受限的环境）；手动安装配置</p>
<h5 id="2、centos"><a href="#2、centos" class="headerlink" title="2、centos"></a>2、centos</h5><ul>
<li><p><a class="link"   href="https://docs.docker.com/engine/install/centos/%EF%BC%88%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%EF%BC%89" >https://docs.docker.com/engine/install/centos/（官方教程）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></div>

</li>
<li><p>执行上述命令时，遇到报错，显示网络错误，可能是DNS污染的原因，搜索 <a class="link"   href="http://www.ip33.com/dns.html" >http://www.ip33.com/dns.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 输入<code>download.docker.com</code> 进行解析，从输出内容中选择一条填入 &#x2F;etc&#x2F;hosts 文件最后一行。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;-<span class="string">EOF &gt; /etc/docker/daemon.json </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">      &quot;https://hub.geekery.cn/&quot;,</span></span><br><span class="line"><span class="string">      &quot;https://ghcr.geekery.cn&quot;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></div>

</li>
<li><p>安装完成后配置镜像加速，执行上方脚本，参考链接 <a class="link"   href="https://xuanyuan.me/blog/archives/1154#Linux" >https://xuanyuan.me/blog/archives/1154#Linux<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>还有一种方法是使用阿里云的<br><a class="link"   href="https://cr.console.aliyun.com/cn-beijing/instances/mirrors" >https://cr.console.aliyun.com/cn-beijing/instances/mirrors<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h5 id="3、Rocky"><a href="#3、Rocky" class="headerlink" title="3、Rocky"></a>3、Rocky</h5><p>利用官方脚本，自动安装配置，直接走官方教程</p>
<h5 id="4、OpenEuler"><a href="#4、OpenEuler" class="headerlink" title="4、OpenEuler"></a>4、OpenEuler</h5><p>走官方centos安装教程一直不好，于是去Google寻求安装方法，暂时参考下述文档<br><a class="link"   href="https://cloud.tencent.com/developer/article/2383890" >https://cloud.tencent.com/developer/article/2383890<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h5 id="5、结语"><a href="#5、结语" class="headerlink" title="5、结语"></a>5、结语</h5><p>遇到的主要问题：docker容器内无法联网<br>参考连接：<a class="link"   href="https://juejin.cn/post/7361720687956901899" >https://juejin.cn/post/7361720687956901899<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>Cheer On~ ⛷️⛷️</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-贮存</title>
    <url>/2024/10/26/docker-%E8%B4%AE%E5%AD%98/</url>
    <content><![CDATA[<h2 id="笔记链接🔗："><a href="#笔记链接🔗：" class="headerlink" title="笔记链接🔗："></a>笔记链接🔗：</h2><p><a class="link"   href="https://ocns4u1yk5x3.feishu.cn/docx/IBWCd1ueaoOHevxirozcT3NZn0g?from=from_copylink" >https://ocns4u1yk5x3.feishu.cn/docx/IBWCd1ueaoOHevxirozcT3NZn0g?from=from_copylink<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-分发镜像</title>
    <url>/2024/10/26/docker-%E5%88%86%E5%8F%91%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h4 id="分发镜像"><a href="#分发镜像" class="headerlink" title="分发镜像"></a>分发镜像</h4><p>概述：将构建好的镜像分发给不同环境或用户的过程<br>作用：</p>
<ol>
<li>部署应用：分发镜像使得在不同的服务器、云平台或本地环境中快速部署应用成为可能。通过将镜像推送到不同的目标位置，可以确保应用在各种环境中以一致的方式运行。</li>
<li>团队协作：在团队开发中，镜像分发可以方便团队成员共享和使用相同的基础镜像或应用镜像。这有助于提高开发效率，减少环境差异导致的问题。</li>
<li>可扩展性：通过分发镜像，可以轻松地将应用扩展到多个节点或容器实例，以满足不同的负载需求。</li>
</ol>
<h5 id="Docker-仓库"><a href="#Docker-仓库" class="headerlink" title="Docker 仓库"></a>Docker 仓库</h5><ul>
<li>推送镜像：使用 docker push 命令将本地构建的镜像推送到指定的仓库。例如，docker push myregistry&#x2F;myimage:latest 将名为 myimage 的镜像推送到名为 myregistry 的仓库。</li>
<li>拉取镜像：在目标环境中，使用 docker pull 命令从仓库中拉取所需的镜像。例如，docker pull myregistry&#x2F;myimage:latest 从仓库中拉取名为 myimage 的镜像。</li>
</ul>
<h5 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h5><ul>
<li>对于企业或团队内部的使用，可以搭建私有 Docker 仓库。私有仓库提供了更高的安全性和控制度，可以限制对镜像的访问权限。</li>
<li>搭建私有仓库可以使用开源软件如 Docker Registry 或 Harbor。配置好私有仓库后，就可以像使用公共仓库一样进行镜像的推送和拉取。</li>
</ul>
<h5 id="直接传输"><a href="#直接传输" class="headerlink" title="直接传输"></a>直接传输</h5><p>  在某些情况下，可能需要直接在不同的服务器之间传输 Docker 镜像，而不通过仓库。<br>  可以使用 docker save 和 docker load 命令来实现。</p>
<ul>
<li>首先，在源服务器上使用 docker save 命令将镜像保存为一个 tar 文件。例如，docker save -o myimage.tar myimage:latest。</li>
<li>然后，将 tar 文件传输到目标服务器，可以使用文件传输工具如 scp 或 ftp。</li>
<li>在目标服务器上，使用 docker load 命令从 tar 文件中加载镜像。例如，docker load -i myimage.tar。</li>
</ul>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>镜像标签：在分发镜像时，使用有意义的镜像标签非常重要。标签可以帮助区分不同版本的镜像，方便管理和部署。例如，使用 latest 标签表示最新版本，或者使用具体的版本号如 v1.0。</li>
<li>安全性：在使用公共仓库或传输镜像时，要注意安全性。确保镜像来源可靠，避免使用来自不可信来源的镜像，以防止潜在的安全风险。</li>
<li>网络环境：分发镜像可能会受到网络环境的影响。在网络条件较差的情况下，可以考虑使用压缩技术或分批次传输来提高传输效率。</li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇文章</title>
    <url>/2024/08/31/test/</url>
    <content><![CDATA[<p>&#x2F;&#x2F; 测试<br>12345<br>上山打老虎</p>
]]></content>
      <categories>
        <category>样本</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>周报_241116</title>
    <url>/2024/11/16/%E5%91%A8%E6%8A%A5-241116/</url>
    <content><![CDATA[<p>都说新的一天新的开始，那么我这新的一周肯定又会是一个宇宙超级无敌而又崭新的开始。</p>
<p>时间过的可真快呀，一眨眼，已经11月，这是我在北京待的第四个冬天了</p>
<p>总结一下这两周的学习成果啦</p>
<ul>
<li>MySQL数据库的增删改查，逻辑备份和物理备份（热备，温备，冷备）</li>
<li>完成了最近一直在跟的 python 编写的学习日志 web 程序</li>
<li>学会了拼魔方</li>
</ul>
<p>不过我最想记录的还是她，现在每周四都会和她所在的班级门对门，很开心，但是不知道该说些什么了，复盘了上百次甚至千次我们上次出去爬山的经历，现在回想起来感觉自己真像一个 呆瓜 一样，，，<br>对了，我养成了不错的习惯，每天按时吃饭，遵循早饭吃好，午饭吃饱，晚饭吃少的定理，晚上10点之前准时去 sleep (￣o￣) . z Z ，我相信，我们会顶峰再见的🌹</p>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-实例ssh</title>
    <url>/2024/10/26/docker-%E5%AE%9E%E4%BE%8Bssh/</url>
    <content><![CDATA[<h2 id="笔记链接🔗："><a href="#笔记链接🔗：" class="headerlink" title="笔记链接🔗："></a>笔记链接🔗：</h2><p><a class="link"   href="https://ocns4u1yk5x3.feishu.cn/docx/Kwqsdw59Wo4hnRxlcfqcZ5nPnWg?from=from_copylink" >https://ocns4u1yk5x3.feishu.cn/docx/Kwqsdw59Wo4hnRxlcfqcZ5nPnWg?from=from_copylink<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>周报_240920</title>
    <url>/2024/09/20/%E5%91%A8%E6%8A%A5_240920/</url>
    <content><![CDATA[<h4 id="对于本月的前三周学习成果以及个人状态做出的总结与反省"><a href="#对于本月的前三周学习成果以及个人状态做出的总结与反省" class="headerlink" title="对于本月的前三周学习成果以及个人状态做出的总结与反省"></a>对于本月的前三周学习成果以及个人状态做出的总结与反省</h4><h5 id="课内学习："><a href="#课内学习：" class="headerlink" title="课内学习："></a>课内学习：</h5><ol>
<li>Linux操作系统安装及服务控制</li>
<li>Linux-CentOS常用命令</li>
<li>Linux安装软件包</li>
<li>账号和权限管理</li>
<li>磁盘和文件系统管理</li>
<li>进程和计划任务管理</li>
<li>系统启动流程、分析日志文件和检查系统故障</li>
<li>Linux基础网络设置</li>
<li>ftp文件传输服务</li>
<li>DNS域名解析服务</li>
<li>sshd服务搭建管理</li>
<li>nginx网络服务基础</li>
</ol>
<p>在实验操作过程当中，关于进程和系统日志类别需要再进一步巩固，在搭建DNS服务时遇到了因软件包版本不同而失败的问题，搭建nginx遇到了DNS解析问题。<br>解决方法：针对进程和日志类别总结了一份word，dns服务器则更换了软件包版本-win，nginx通过在本地的hosts文件中添加对应的dns主机解析-win。</p>
<h5 id="课外学习："><a href="#课外学习：" class="headerlink" title="课外学习："></a>课外学习：</h5><p>对python中的类有了基础的了解和掌握</p>
<p>其一，是<code>__init__</code>方法</p>
<p>含义：一个特殊的方法，叫做构造方法。当一个类的实例被创建时，<code>__init__</code>方法会自动被调用，用于初始化这个实例的属性。</p>
<p>作用：设置对象的初始状态，比如可以再这个方法中接受参数，为对象的属性赋值。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">		<span class="variable language_">self</span>.name = name</span><br><span class="line">		<span class="variable language_">self</span>.age = age</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 在这个例子中，当创建一个Person类的实例时，__init__方法会接收name和age两个参数，并将它们分别赋值给实例的name和age属性。&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>其二，是 <code>self</code> 参数</p>
<p>含义：self代表类的实例（对象）本身。在类的方法中，必须要有一个参数代表实例对象，这个参数通常被命名为self。</p>
<p>作用：通过<code>self</code>可以访问和操作实例的属性与方法。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">		<span class="variable language_">self</span>.name = name</span><br><span class="line">		<span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">f&quot;Hello, I am <span class="subst">&#123;self.name&#125;</span> and I am <span class="subst">&#123;self.age&#125;</span> years old.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 在introduce方法中，通过self.name和self.age访问了实例的属性，并打印出相应的信息。当调用这个方法时，实际上是在操作特定的实例对象。&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>



<h5 id="个人状态方面："><a href="#个人状态方面：" class="headerlink" title="个人状态方面："></a>个人状态方面：</h5><p>9月9日凌晨，错过一位喜欢了很久的姑娘，时常会感到惋惜……，但是这并不会成为终章⛷️⛷️😎</p>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>天气预报自动推送</title>
    <url>/2024/10/07/weather-report/</url>
    <content><![CDATA[<h4 id="一、申请微信测试公众号（https-mp-weixin-qq-com-debug-cgi-bin-sandbox-t-sandbox-login）"><a href="#一、申请微信测试公众号（https-mp-weixin-qq-com-debug-cgi-bin-sandbox-t-sandbox-login）" class="headerlink" title="一、申请微信测试公众号（https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login）"></a>一、申请微信测试公众号（<a class="link"   href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login%EF%BC%89" >https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><ol>
<li><p>获取到这四个值 appID, appSecret, openId, template_id</p>
</li>
<li><p>想让谁收消息，谁就用微信扫二维码，刷新页面后即出现在用户列表，获取微信号（openId）</p>
</li>
<li><p>新增测试模板获得  template_id（模板ID）</p>
<p> 天气模板：</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">今天：&#123;&#123;date.DATA&#125;&#125;</span><br><span class="line">地区：&#123;&#123;region.DATA&#125;&#125;</span><br><span class="line">天气：&#123;&#123;weather.DATA&#125;&#125;</span><br><span class="line">气温：&#123;&#123;temp.DATA&#125;&#125;</span><br><span class="line">风向：&#123;&#123;wind_dir.DATA&#125;&#125;</span><br><span class="line">对你说的话：&#123;&#123;today_note.DATA&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p> 课程表模板：</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">消息：&#123;&#123;message.DATA&#125;&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<hr>
<h4 id="二、配置代码"><a href="#二、配置代码" class="headerlink" title="二、配置代码"></a>二、配置代码</h4><ol>
<li><p>将上面获得的几个值填入代码这几行，启动即可</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">appID = &quot;&quot;</span><br><span class="line">appSecret = &quot;&quot;</span><br><span class="line">#收信人ID即 用户列表中的微信号，见上文</span><br><span class="line">openId = &quot;&quot;</span><br><span class="line"># 天气预报模板ID</span><br><span class="line">weather_template_id = &quot;&quot;</span><br><span class="line"># 时间表模板ID</span><br><span class="line">timetable_template_id = &quot;&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>定时任务（根据需求进行修改这几行）</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">schedule.every().day.at(&quot;08:00&quot;).do(weather_report, &quot;北京&quot;)</span><br><span class="line"># schedule.every().monday.at(&quot;13:30&quot;).do(timetable, &quot;还有15分钟开始下午的课程&quot;)</span><br><span class="line">while True:</span><br><span class="line">   schedule.run_pending()</span><br><span class="line">   time.sleep(1)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>完成代码如下</p>
 <div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖 pip3 install requests html5lib bs4 schedule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从测试号信息获取</span></span><br><span class="line">appID = <span class="string">&quot;wx1c904b832908e3d7&quot;</span></span><br><span class="line">appSecret = <span class="string">&quot;024e7a99b9bd93e4ec2ba0e61cb99869&quot;</span></span><br><span class="line"><span class="comment">#收信人ID即 用户列表中的微信号，见上文</span></span><br><span class="line">openId = <span class="string">&quot;oLg156sEhzpHX3f6OKG6HaCTid9s&quot;</span></span><br><span class="line"><span class="comment"># 天气预报模板ID</span></span><br><span class="line">weather_template_id = <span class="string">&quot;T00eYDomN3GOBXOTqTYhX27Nqp-vCdDO2xHKAK1ElH8&quot;</span></span><br><span class="line"><span class="comment"># 时间表模板ID</span></span><br><span class="line">timetable_template_id = <span class="string">&quot;kg29LwRP6--uo6Xq3mm-aRyJFaF_Pe2SsnUjYq23YpA&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">my_city</span>):</span><br><span class="line">    urls = [<span class="string">&quot;http://www.weather.com.cn/textFC/hb.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/db.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/hd.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/hz.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/hn.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/xb.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/xn.shtml&quot;</span></span><br><span class="line">            ]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        resp = requests.get(url)</span><br><span class="line">        text = resp.content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        soup = BeautifulSoup(text, <span class="string">&#x27;html5lib&#x27;</span>)</span><br><span class="line">        div_conMidtab = soup.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;conMidtab&quot;</span>)</span><br><span class="line">        tables = div_conMidtab.find_all(<span class="string">&quot;table&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> table <span class="keyword">in</span> tables:</span><br><span class="line">            trs = table.find_all(<span class="string">&quot;tr&quot;</span>)[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">for</span> index, tr <span class="keyword">in</span> <span class="built_in">enumerate</span>(trs):</span><br><span class="line">                tds = tr.find_all(<span class="string">&quot;td&quot;</span>)</span><br><span class="line">                <span class="comment"># 这里倒着数，因为每个省会的td结构跟其他不一样</span></span><br><span class="line">                city_td = tds[-<span class="number">8</span>]</span><br><span class="line">                this_city = <span class="built_in">list</span>(city_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> this_city == my_city:</span><br><span class="line"></span><br><span class="line">                    high_temp_td = tds[-<span class="number">5</span>]</span><br><span class="line">                    low_temp_td = tds[-<span class="number">2</span>]</span><br><span class="line">                    weather_type_day_td = tds[-<span class="number">7</span>]</span><br><span class="line">                    weather_type_night_td = tds[-<span class="number">4</span>]</span><br><span class="line">                    wind_td_day = tds[-<span class="number">6</span>]</span><br><span class="line">                    wind_td_day_night = tds[-<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">                    high_temp = <span class="built_in">list</span>(high_temp_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line">                    low_temp = <span class="built_in">list</span>(low_temp_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line">                    weather_typ_day = <span class="built_in">list</span>(weather_type_day_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line">                    weather_type_night = <span class="built_in">list</span>(weather_type_night_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    wind_day = <span class="built_in">list</span>(wind_td_day.stripped_strings)[<span class="number">0</span>] + <span class="built_in">list</span>(wind_td_day.stripped_strings)[<span class="number">1</span>]</span><br><span class="line">                    wind_night = <span class="built_in">list</span>(wind_td_day_night.stripped_strings)[<span class="number">0</span>] + <span class="built_in">list</span>(wind_td_day_night.stripped_strings)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 如果没有白天的数据就使用夜间的</span></span><br><span class="line">                    temp = <span class="string">f&quot;<span class="subst">&#123;low_temp&#125;</span>——<span class="subst">&#123;high_temp&#125;</span>摄氏度&quot;</span> <span class="keyword">if</span> high_temp != <span class="string">&quot;-&quot;</span> <span class="keyword">else</span> <span class="string">f&quot;<span class="subst">&#123;low_temp&#125;</span>摄氏度&quot;</span></span><br><span class="line">                    weather_typ = weather_typ_day <span class="keyword">if</span> weather_typ_day != <span class="string">&quot;-&quot;</span> <span class="keyword">else</span> weather_type_night</span><br><span class="line">                    wind = <span class="string">f&quot;<span class="subst">&#123;wind_day&#125;</span>&quot;</span> <span class="keyword">if</span> wind_day != <span class="string">&quot;--&quot;</span> <span class="keyword">else</span> <span class="string">f&quot;<span class="subst">&#123;wind_night&#125;</span>&quot;</span></span><br><span class="line">                    <span class="keyword">return</span> this_city, temp, weather_typ, wind</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_access_token</span>():</span><br><span class="line">    <span class="comment"># 获取access token的url</span></span><br><span class="line">    url = <span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#123;&#125;&amp;secret=&#123;&#125;&#x27;</span> \</span><br><span class="line">        .<span class="built_in">format</span>(appID.strip(), appSecret.strip())</span><br><span class="line">    response = requests.get(url).json()</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br><span class="line">    access_token = response.get(<span class="string">&#x27;access_token&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> access_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_daily_love</span>():</span><br><span class="line">    <span class="comment"># 每日一句情话</span></span><br><span class="line">    url = <span class="string">&quot;https://api.lovelive.tools/api/SweetNothings/Serialization/Json&quot;</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    all_dict = json.loads(r.text)</span><br><span class="line">    sentence = all_dict[<span class="string">&#x27;returnObj&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    daily_love = sentence</span><br><span class="line">    <span class="keyword">return</span> daily_love</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_weather</span>(<span class="params">access_token, weather</span>):</span><br><span class="line">    <span class="comment"># touser 就是 openID</span></span><br><span class="line">    <span class="comment"># template_id 就是模板ID</span></span><br><span class="line">    <span class="comment"># url 就是点击模板跳转的url</span></span><br><span class="line">    <span class="comment"># data就按这种格式写，time和text就是之前&#123;&#123;time.DATA&#125;&#125;中的那个time，value就是你要替换DATA的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    today = datetime.date.today()</span><br><span class="line">    today_str = today.strftime(<span class="string">&quot;%Y年%m月%d日&quot;</span>)</span><br><span class="line"></span><br><span class="line">    body = &#123;</span><br><span class="line">        <span class="string">&quot;touser&quot;</span>: openId.strip(),</span><br><span class="line">        <span class="string">&quot;template_id&quot;</span>: weather_template_id.strip(),</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://weixin.qq.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;date&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: today_str</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;region&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: weather[<span class="number">0</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;weather&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: weather[<span class="number">2</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;temp&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: weather[<span class="number">1</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;wind_dir&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: weather[<span class="number">3</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;today_note&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: get_daily_love()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(access_token)</span><br><span class="line">    <span class="built_in">print</span>(requests.post(url, json.dumps(body)).text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_timetable</span>(<span class="params">access_token, message</span>):</span><br><span class="line">    body = &#123;</span><br><span class="line">        <span class="string">&quot;touser&quot;</span>: openId,</span><br><span class="line">        <span class="string">&quot;template_id&quot;</span>: timetable_template_id.strip(),</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://weixin.qq.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: message</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(access_token)</span><br><span class="line">    <span class="built_in">print</span>(requests.post(url, json.dumps(body)).text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weather_report</span>(<span class="params">city</span>):</span><br><span class="line">    <span class="comment"># 1.获取access_token</span></span><br><span class="line">    access_token = get_access_token()</span><br><span class="line">    <span class="comment"># 2. 获取天气</span></span><br><span class="line">    weather = get_weather(city)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;天气信息： <span class="subst">&#123;weather&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 3. 发送消息</span></span><br><span class="line">    send_weather(access_token, weather)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timetable</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="comment"># 1.获取access_token</span></span><br><span class="line">    access_token = get_access_token()</span><br><span class="line">    <span class="comment"># 3. 发送消息</span></span><br><span class="line">    send_timetable(access_token, message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    weather_report(<span class="string">&quot;河北&quot;</span>)</span><br><span class="line">    <span class="comment"># timetable(&quot;第二教学楼十分钟后开始英语课&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># schedule.every().day.at(&quot;08:00&quot;).do(weather_report, &quot;北京&quot;)</span></span><br><span class="line">    <span class="comment"># schedule.every().monday.at(&quot;13:30&quot;).do(timetable, &quot;还有15分钟开始下午的课程&quot;)</span></span><br><span class="line">    <span class="comment">#while True:</span></span><br><span class="line">    <span class="comment">#   schedule.run_pending()</span></span><br><span class="line">    <span class="comment">#   time.sleep(1)</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>原创文档链接：<a class="link"   href="https://www.bilibili.com/read/cv28928153/" >https://www.bilibili.com/read/cv28928153/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>原创视频链接：<br><a class="link"   href="https://www.bilibili.com/video/BV1Ng4y1r7EP/?spm_id_from=333.880.my_history.page.click&vd_source=576ff0210b33e8823a0a538d3f79f11f" >https://www.bilibili.com/video/BV1Ng4y1r7EP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=576ff0210b33e8823a0a538d3f79f11f<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>月报-24年10月</title>
    <url>/2024/10/29/%E6%9C%88%E6%8A%A5-24%E5%B9%B410%E6%9C%88/</url>
    <content><![CDATA[<h4 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h4><p><strong>URL和 URI</strong></p>
<ul>
<li><p>URL（统一资源定位符）：是 URI 的一种具体实现方式，它不仅标识了资源，还详细说明了如何通过网络协议来定位和访问该资源</p>
</li>
<li><p>URI（统一资源定位符）：是一个用于标识某一互联网资源名称的字符串，它为互联网上的资源提供了一个标准的、通用的标识方法</p>
</li>
<li><p>URL 是 URI 的子集： 所有的 URL 都是 URI，因为 URL 满足 URI 的基本定义，即用于标识资源。URL 在 URI 的基础上，增加了定位和访问资源的具体信息，使其更加具体和实用。 可以简单地理解为，URI 是一个更广泛的概念，而 URL 是 URI 在网络资源访问领域的一种具体化和实用化的形式。</p>
</li>
</ul>
<p><strong>四层负载和七层负载</strong></p>
<ul>
<li><p>处理速度：四层负载均衡处理速度更快，七层负载均衡由于需要解析应用层协议，速度相对较慢，但提供了更精细的请求处理功能。</p>
</li>
<li><p>功能侧重点：四层负载均衡功能相对简单，主要侧重于网络层和传输层的流量分配；七层负载均衡功能丰富，包括内容优化、安全防护、精准请求分配等。</p>
</li>
<li><p>应用场景：四层负载均衡适用于对速度和通用性要求高的场景，七层负载均衡适用于需要深入处理应用层内容和优化复杂应用的场景</p>
</li>
</ul>
<p><strong>金丝雀和蓝绿（两种软件部署策略）</strong></p>
<ul>
<li><p>原理：金丝雀发布得名于煤矿工人使用金丝雀检测矿井中的有毒气体。在软件部署中，它是指先将新版本软件部署到一小部分用户（如 1 - 5%）或服务器上，作为 “金丝雀”，对这些 “金丝雀” 进行密切监控，观察其在真实环境中的运行情况，包括性能、稳定性、错误率等指标，然后再决定是否将新版本全面部署。</p>
<blockquote>
<p>特点：逐步推进、风险可控、反馈及时</p>
</blockquote>
</li>
<li><p>原理：蓝绿发布是将生产环境分为蓝色环境和绿色环境两个完全相同（或高度相似）的环境，蓝色环境为当前正在运行的生产环境，绿色环境为准备部署新版本的环境。在部署时，先将新版本部署到绿色环境中，对绿色环境进行全面测试，包括功能测试、性能测试、稳定性测试等，当确定绿色环境中的新版本没有问题后，将流量从蓝色环境切换到绿色环境，从而完成新版本的部署。</p>
<blockquote>
<p>特点：环境隔离、快速切换</p>
</blockquote>
</li>
</ul>
<p><strong>有状态应用和无状态应用</strong></p>
<ul>
<li><p>无状态应用：在处理请求时，不依赖于之前的请求或会话信息的应用程序。每个请求都被视为独立的操作，应用程序仅根据当前请求中包含的信息来生成响应，而不考虑之前发生了什么。例如，一个简单的静态网页服务器，它接收客户端请求并返回对应的 HTML 文件，每次请求都是独立的，服务器不需要知道客户端之前的访问历史。 </p>
</li>
<li><p>有状态应用：在处理请求的过程中，需要依赖于之前的请求、会话或者其他外部存储中的状态信息来生成响应。这些状态信息可以存储在内存、数据库、文件系统等地方。比如一个网上银行系统，用户登录后进行转账操作，系统需要知道用户的登录状态、账户余额等信息，这些信息就是状态信息，转账操作需要基于这些状态信息来完成。</p>
</li>
</ul>
<p><strong>孤儿进程和僵尸进程</strong> </p>
<ul>
<li><p>孤儿进程：父进程先于它的子进程结束运行时，这个子进程就会成为孤儿进程。在 Linux 中会被 init 进程（进程ID为1 ）接管。 </p>
</li>
<li><p>僵尸进程：当一个子进程结束后，它的进程控制块（PCB）等资源没有被父进程调用 wait( ) 或 waitpid( ) 等系统去回收子进程资源，子进程就会变成僵尸进程。此时子进程虽然已经终止运行，但在系统进程表中仍保留其相关信息。</p>
</li>
</ul>
<h4 id="成果总结"><a href="#成果总结" class="headerlink" title="成果总结"></a>成果总结</h4><ul>
<li><p>Docker 的安装、制作 | 分发镜像、容器、网络、贮存</p>
</li>
<li><p>python的第一个项目——学习日志小程序</p>
</li>
</ul>
<h4 id="扩展小知识"><a href="#扩展小知识" class="headerlink" title="扩展小知识"></a>扩展小知识</h4><p><strong>Docker的图标</strong> </p>
<ul>
<li><p>容器化象征：集装箱代表着 Docker 所提供的容器技术。在现实世界中，集装箱标准化了货物的包装和运输方式，使得货物可以高效、安全地在不同运输工具和地点之间流转。同样，Docker 容器标准化了软件的打包和部署方式，使得应用程序可以在不同的计算环境中轻松运行，不受底层基础设施的差异影响。  </p>
</li>
<li><p>鲸鱼作为载体：鲸鱼通常被视为强大和稳定的象征。在 Docker 的图标中，鲸鱼承载着集装箱，寓意着 Docker 为应用程序提供了一个强大而稳定的运行平台。就像鲸鱼在海洋中自由游动一样，Docker 使得应用程序可以在不同的计算环境中自由部署和运行。</p>
</li>
</ul>
<blockquote>
<p>10月21日从朋友口中听到了小鹰成为老鹰的故事，我想我会以所想象到的语言来记录下：<br>小鹰成长为老鹰是一个充满挑战与蜕变的过程。 小鹰从破壳而出开始，便在父母的庇护下逐渐认识这个世界。最初，它只能待在巢穴里，等待父母带回食物。但随着身体的发育，小鹰开始在巢穴周围活动，锻炼自己弱小的翅膀和爪子。这是成长的第一阶段，就像孩子的学步期，开始试探自己的能力。 当小鹰的羽翼逐渐丰满，真正的考验便来临了。老鹰父母会故意减少对小鹰的食物供给，这促使小鹰开始尝试飞行。小鹰第一次从巢穴边缘飞出，那种对高度和速度的恐惧是巨大的。然而，这只是开始，因为飞行不仅仅是离开巢穴，还需要掌握平衡、方向和高度的控制。小鹰会在一次次的试飞中不断调整自己的飞行姿态，可能会多次跌落，但每一次跌落都是成长的积累。 学会飞行之后，小鹰要学习捕食技能。小鹰要在广阔天空中锁定猎物，然后以极快的速度俯冲下去。这个过程需要敏锐的视力、精准的判断和强大的爆发力。小鹰开始可能会失败，找不到目标或者抓不住猎物，但它会通过不断观察父母的捕食技巧，不断练习，最终成为一名优秀的 “猎手”。 经过这些艰难的历练，小鹰在身体和心智上都逐渐成熟，最终完成从依赖父母的小鹰到独立自主的老鹰的转变，翱翔在广阔的天空中，开始自己的生命旅程。 			<br>                                                                    —— LSQ</p>
</blockquote>
]]></content>
      <categories>
        <category>月报</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>周报_241020</title>
    <url>/2024/10/20/%E5%91%A8%E6%8A%A5_241020/</url>
    <content><![CDATA[<h4 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h4><p>结束了 shell 脚本中 awk 和 sed  的学习，主要从中汲取了循环、判断、嵌套……的逻辑思路</p>
<h4 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h4><p>开启了 docker 之旅~</p>
<p>学习了一些关于 docker 的基本概念及安装</p>
<p>构建镜像分为 基于基础镜像 和 使用 Dockerfile 两种方式</p>
<p>使用 Dockerfile 构建时的常用指令</p>
<h4 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h4><p>开始使用 python 编写Web程序，预计下个月中旬上线云服务器✌</p>
<p>练习分发镜像，两种情况：公共仓库和私有仓库（推荐）</p>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>月报-24年9月</title>
    <url>/2024/09/29/%E6%9C%88%E6%8A%A5-24%E5%B9%B49%E6%9C%88/</url>
    <content><![CDATA[<h4 id="这篇月报将会分为四部分进行阐述"><a href="#这篇月报将会分为四部分进行阐述" class="headerlink" title="这篇月报将会分为四部分进行阐述"></a><strong>这篇月报将会分为四部分进行阐述</strong></h4><ul>
<li>   回顾9月学习内容</li>
<li>   遇到的问题分析</li>
<li>   解决方法与教训</li>
<li>   10月的大致规划</li>
</ul>
<hr>
<h5 id="一、9月回顾"><a href="#一、9月回顾" class="headerlink" title="一、9月回顾"></a>一、9月回顾</h5><p>关于Linux系统（CentOS、Ubuntu）有了夯实的基础，掌握了磁盘和文件系统的管理、进程和计划任务管理、用户账号和权限管理，可以搭建如DNS、DHCP、NFS、Rsync、FTP等等服务，目前已经展开了对Shell脚本的学习……；</p>
<p>在课外学习Python语言的类和实例对象、模块导入及引用其类、函数，开始编写第一个项目——《外星人入侵》游戏</p>
<h5 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h5><ol>
<li>搞错了rsync和sersync谁是数据源谁是备份数据源的对应关系，并对实时同步产生了新的理解；</li>
<li>编写”飞船“时，修改了飞船的初始位置，但在后面又将其设置为了初始值，导致无法左右持续移动；</li>
</ol>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 更新飞船的属性x的值，而不是其外接矩形的属性x的值</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.moving_right <span class="keyword">and</span> <span class="variable language_">self</span>.rect.right &lt; <span class="variable language_">self</span>.screen_rect.right:</span><br><span class="line">        <span class="variable language_">self</span>.rect.x += <span class="variable language_">self</span>.settings.ship_speed</span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.moving_left <span class="keyword">and</span> <span class="variable language_">self</span>.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="variable language_">self</span>.rect.x -= <span class="variable language_">self</span>.settings.ship_speed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不需要再将self.rect.x设置为self.x，因为self.x没有在其他地方更新</span></span><br><span class="line">    <span class="comment"># self.rect.x = self.x</span></span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>对于函数、类、模块、方法、属性概念性的知识以及中间的关联不够清晰</li>
<li>在这段时间中，发现自己的专注力有一个时间点，一般为上午2至3小时，下午3至5小时，一旦超过自己的专注时间再就很难学进去；</li>
<li>会因为外界的声音产生一些焦虑和不安，但又会时常感性，觉得世事无常，最不确定的事情总是那些已经确定了的事情。</li>
</ol>
<h5 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h5><ol>
<li><p>rsync是一个远程数据同步工具，它通过比较源和目标文件的修改时间、大小等信息来决定哪些文件需要被同步，而sersync是基于rsync开发的一款工具，通过内核的inotify机制来监控文件系统的事件（如文件的创建、修改、删除等）一旦检测到文件系统有变化，就立即触发rsync命令来进行数据通过，这样就可以做到实时同步，其中sersync作为数据源，而rsync则是备份方<br>  <code>注：如果要让两者的身份进行互换，则可以在rsync端通过执行命令将本地文件发送到目标rsync端（也就是sersync端）</code></p>
</li>
<li><p>将其冲突的属性进行注释保留</p>
</li>
<li><p><strong>函数：</strong>函数是一段可重复使用的代码块，用于执行特定的任务。它接受输入参数（可以是零个或多个），并根据这些参数执行一系列操作，最后可能返回一个结果（也可以不返回任何结果，即返回值为None）</p>
  <div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_numbers</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="comment"># 这个add_numbers函数接受两个参数a和b，将它们相加并返回结果</span></span><br></pre></td></tr></table></figure></div>

<p>  函数可以独立存在，也可以作为类中的方法存在（后面会详细介绍方法）。在模块中，函数是基本的代码组织单元，可以被其他函数、类或模块调用。</p>
<p>  <strong>类：</strong>类是一种抽象的数据类型，用于创建对象（实例）。它定义了一组属性（描述对象的特征）和方法（描述对象的行为）</p>
  <div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;My name is <span class="subst">&#123;self.name&#125;</span> and I&#x27;m <span class="subst">&#123;self.age&#125;</span> years old.&quot;</span></span><br><span class="line"><span class="comment"># 这里Person类有name和age两个属性，以及introduce方法</span></span><br></pre></td></tr></table></figure></div>

<p>  类可以包含多个函数（方法），这些方法用于操作类的属性或者执行与类相关的操作。类是对象 - 面向对象编程（OOP）的核心概念，通过实例化类可以创建多个具有相同属性和方法定义的对象。类可以被组织在模块中。</p>
<p>  <strong>模块：</strong>模块是一个包含 Python 定义和语句的文件，其文件名就是模块名（去掉.py扩展名）。模块用于组织代码，将相关的函数、类等代码组织在一起，方便代码的管理、复用和维护。</p>
  <div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my_module.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_numbers</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure></div>

<p>  模块可以包含多个函数、类等代码元素。一个模块中的函数或类可以被其他模块导入并使用。这有助于将大型项目分解成多个小的、可管理的部分，提高代码的可读性和可维护性。</p>
<p>  <strong>方法：</strong>方法是定义在类内部的函数，它与类的实例（对象）相关联。方法可以访问和操作类的属性，并且第一个参数通常是self（在 Python 中），用于指代调用该方法的对象实例。 </p>
<p>  例如，前面Person类中的introduce方法就是一个类方法，它通过self访问name和age属性。</p>
  <div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;My name is <span class="subst">&#123;self.name&#125;</span> and I&#x27;m <span class="subst">&#123;self.age&#125;</span> years old.&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Person类的实例</span></span><br><span class="line">person1 = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>)</span><br><span class="line"><span class="comment"># 调用introduce方法并打印结果</span></span><br><span class="line"><span class="built_in">print</span>(person1.introduce())</span><br></pre></td></tr></table></figure></div>

<p>  方法是类的重要组成部分，它依赖于类的定义存在。不同的类可以有相同名称的方法，但它们的功能可能因类的属性和逻辑不同而有所差异。</p>
<p>  <strong>属性：</strong>属性是与类或对象相关联的数据值。在类中，属性可以在类的内部定义，通过实例化类后，对象就拥有了这些属性。属性可以是简单的数据类型（如整数、字符串等），也可以是复杂的数据结构（如列表、字典等）。 在前面的Person类中，name和age就是属性。</p>
<p>  属性是类和对象的状态描述。类的方法通常会操作这些属性来实现特定的功能。属性的值可以在类的方法中被修改，也可以在对象创建时进行初始化。</p>
</li>
<li><p>调整学习时间，在无法专注的时候去做一些简单轻松可以完成的事情，驱使自己去做一些感兴趣的爱好</p>
</li>
<li><p>时间是最好的答案⛷️</p>
</li>
</ol>
<h5 id="四、10月规划"><a href="#四、10月规划" class="headerlink" title="四、10月规划"></a>四、10月规划</h5><ul>
<li><input disabled="" type="checkbox"> 首先是对于10月1假期要完成的列表<ul>
<li>完成正在编写的 Python小游戏——《外星人入侵》</li>
<li>预习shell脚本实战</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 备战10月19、20日的学历考试</li>
</ul>
<p>[^CHEER ON]: </p>
]]></content>
      <categories>
        <category>月报</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>月报-241130</title>
    <url>/2024/11/30/%E6%9C%88%E6%8A%A5-241130/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>这篇月报将会从 知识点回忆、反省不足、总结 三个方面来进行阐述。</p>
<h4 id="知识点回忆"><a href="#知识点回忆" class="headerlink" title="知识点回忆"></a>知识点回忆</h4><p>第一周学习了 Kubernetes 的概念和安装<br>第二、三周主攻了 MySQL（关系型数据库）<br>第四周冲击 Redis（非关系型数据库）</p>
<h4 id="反省不足"><a href="#反省不足" class="headerlink" title="反省不足"></a>反省不足</h4><p>知识转化率下降到百分之七十了，需要用课外时间来弥补，后续要提升一下；<br>由于前几天晚上没有按时好好睡觉，学习期间时不时走神，之后要想办法克服一下；<br>做事情老上头，明明已经看到了结果，但老跟个二百五一样不撞南墙不回头，以后要多注意；<br>不要总觉得什么事情都尴尬，每天发生的事情不是让我尴尬的，它是我生活的内容，要享受；<br>一定一定一定要把自己三分钟热度这个坏习惯改掉，说一就是一，干了就干好，不能再三天打鱼两天晒网了，给自己争口气！！！</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>学习了这么久关于云计算方面的知识，脑中已经渐渐浮现自己目前所理解的架构了，不管是什么工具都是为了更加便捷才会出世，先学习它的概念、功能，然后安装它，看看它长什么样子，最后就是如何运用它来解决遇到的一些问题，想起曾经老师和我讲的万能公式：what、why、when、how（3W1H），真的好使🌹🌹😋</p>
<p>对于下个月的展望 flag</p>
<ul>
<li>掌握 kafka</li>
<li>k8s 基本功干足</li>
<li>准备一个开源项目</li>
</ul>
]]></content>
      <categories>
        <category>月报</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>心灵鸡汤007</title>
    <url>/2024/11/02/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4007/</url>
    <content><![CDATA[<p>最近很焦虑，总是担心一些没有发生的事情，做计划也老是往最坏的方向想，但是这两天晚上夜跑的时候突然就想通了，也没那么内耗了，想要分享记录下来：</p>
<p>现在的 “大学生活” 让我学会接受所有可能性，不再机械地活着，不再批判他人的选择和决定，</p>
<p>有人努力奋斗，我钦佩他不顾一切的勤奋</p>
<p>有人选择躺平，我羡慕她享受生活的自由</p>
<p>有人频繁约会，我觉得他的经历丰富多彩</p>
<p>有人追求纯爱，我祝他找到自我的第一选择</p>
<p>有人选择毕业就结婚，我希望他幸福</p>
<p>有女孩享受带大学四年单身自由，我欣赏她的独立</p>
<p>互联网上总是争吵 “大学” 的价值观，因为人总是习惯性地，把自我价值观强加给别人</p>
<p>然而有什么事只有一个答案呢？谁能说自己地选择更正确呢？所处的世界是一个多元化地，要学会接受 “不同”</p>
<p>🫡😶‍🌫️🥱😃😄⛷️💧💫🪸💯</p>
]]></content>
      <categories>
        <category>生活感悟</category>
      </categories>
      <tags>
        <tag>qwq</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2024/10/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="1、锚点"><a href="#1、锚点" class="headerlink" title="1、锚点"></a>1、锚点</h5><p>^ 	匹配字符串或行的开头<br>$ 	匹配字符串或行的末尾<br>\b	匹配单词的开头或末尾<br>\B	匹配不在单词的开头或末尾的位置</p>
<h5 id="2、字符类"><a href="#2、字符类" class="headerlink" title="2、字符类"></a>2、字符类</h5><p>[abc]	 字符集，匹配集合中的任意字符<br>[^abc]     反选字符集，匹配不在集合中的任意字符<br>[a-z]	  匹配两个字符之间的任意字符，包括它们本身<br>.		匹配除换行符之外的任意字符<br>\w	 	匹配字母、数字或下划线<br>\W           匹配除字母、数字或下划线之外的任意字符<br>\d 		匹配所有数字<br>\D           匹配除数字外的任意字符<br>\s            匹配所有空白字符<br>\S           匹配除空白字符以外的任意字符</p>
<h5 id="3、量词与分支"><a href="#3、量词与分支" class="headerlink" title="3、量词与分支"></a>3、量词与分支</h5><p>‘+’	      表达式匹配一个或多个<br>‘*’ 	表达式匹配零个或多个<br>{n}	       表达式匹配恰好出现 n 次的元素<br>{n,}	表达h式匹配至少出现 n 次的元素<br>{n,m}	表达式匹配 n 到 m 次的元素<br>?	使用表达式可选<br>|	类似于“或”，用于匹配多种符合条件的表达式之一</p>
<h5 id="4、零宽断言"><a href="#4、零宽断言" class="headerlink" title="4、零宽断言"></a>4、零宽断言</h5><p>(?&#x3D;)       正向先行断言<br>(?!) 	 负向先行断言<br>(?&lt;&#x3D;)     正向后行断言<br>(?&lt;!)      负向后行断言</p>
<h5 id="5、标志"><a href="#5、标志" class="headerlink" title="5、标志"></a>5、标志</h5><p>i	使表达式忽略大小写<br>g	确保表达式不会在检索到第一个匹配项时停止<br>m	如果不启用，”^”和”$”只匹配整个字符串的开始和结束，而不会单独匹配每一行</p>
<h5 id="6、组和引用"><a href="#6、组和引用" class="headerlink" title="6、组和引用"></a>6、组和引用</h5><p>( )	      使表达式分组<br>\1	     引用表达式的分组<br>(?:)	创建无法引用的分组</p>
<h5 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h5><ul>
<li>sed（流编辑器）中的模式空间和保存空间</li>
</ul>
<p>模式空间（Pattern Space）</p>
<p>  就像是一个临时的工作区。当 <code>sed</code> 处理一行文本时，会把这一行内容放到模式空间里。然后在这个模式空间中对这行文本进行各种操作，比如替换、删除、打印等。</p>
<p>保持空间（Hold Space）</p>
<p>  这是一个额外的存储区域。你可以把一些内容从模式空间复制到保持空间进行暂存，或者从保持空间把内容取回模	式空间进行进一步处理。比如你在处理一个文件时，遇到一些特殊的行想先保存起来，等处理到后面的时候再拿出	来用，就可以把这些行放到保持空间</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
</search>
