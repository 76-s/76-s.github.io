<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Github==&gt;个人博客</title>
    <url>/2024/10/20/Hexo-Github-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="这篇文章是对于使用-hexo-和-github-搭建个人博客的思路梳理"><a href="#这篇文章是对于使用-hexo-和-github-搭建个人博客的思路梳理" class="headerlink" title="这篇文章是对于使用 hexo 和 github 搭建个人博客的思路梳理"></a>这篇文章是对于使用 hexo 和 github 搭建个人博客的思路梳理</h3><h4 id="1、下载-node-js"><a href="#1、下载-node-js" class="headerlink" title="1、下载 node.js"></a>1、下载 node.js</h4><p><a class="link"   href="https://nodejs.org/zh-cn" >https://nodejs.org/zh-cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="2、下载-git"><a href="#2、下载-git" class="headerlink" title="2、下载 git"></a>2、下载 git</h4><p><a class="link"   href="https://git-scm.com/downloads" >https://git-scm.com/downloads<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>验证是否下载成功，管理员运行 cmd 输入以下三条命令</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git -v</span><br></pre></td></tr></table></figure></div>

<h4 id="3、下载-hexo"><a href="#3、下载-hexo" class="headerlink" title="3、下载 hexo"></a>3、下载 hexo</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></div>

<h4 id="4、搭建仓库"><a href="#4、搭建仓库" class="headerlink" title="4、搭建仓库"></a>4、搭建仓库</h4><p>名称格式：<code>仓库名称.github.io</code></p>
<p>勾选 Public</p>
<p>勾选 Add a README file</p>
<p>拉到下面点击 create 创建</p>
<h4 id="5、生成SSH-Keys"><a href="#5、生成SSH-Keys" class="headerlink" title="5、生成SSH Keys"></a>5、生成SSH Keys</h4><p>进入任意文件夹，右键空白处然后点Git bash here,输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>然后敲4次Enter⌨️<br>然后进入C:\Users\用户名，在里面进入.ssh文件<br>用记事本打开里面的id_rsa.pub,全选复制里面的代码<br>然后打开github<br>进入用户设置，找到SSH keys<br>新建SSH keys，名称随意，在下面粘贴代码，<br>然后创建<br>测试是否成功<br>在git bash中输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>

<p>回车，然后再输入 yes</p>
<h4 id="6、本地部署"><a href="#6、本地部署" class="headerlink" title="6、本地部署"></a>6、本地部署</h4><p>在喜欢位置新建文件Blog，然后进入文件夹<br>右键空白处然后点 Git bash here，输入</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></div>

<p>然后依次输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g	<span class="comment"># 生成</span></span><br><span class="line">hexo s	<span class="comment"># 预览</span></span><br></pre></td></tr></table></figure></div>

<p>（如果不成功的话就重复直到成功，因为国内与github连接不稳定）<br>现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了<br>然后回到命令行，ctrl+c 关闭</p>
<h4 id="7、上线博客"><a href="#7、上线博客" class="headerlink" title="7、上线博客"></a>7、上线博客</h4><p>进入之前的Blog文件夹，用记事本打开_config.yml<br>编辑 url 段落</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line">url: https://Jiang07Shuai06.github.io</span><br></pre></td></tr></table></figure></div>

<p>拉到最下面将deploy后面的全删掉，复制粘贴这段</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repository: </span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure></div>

<p>注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！<br>去 github 之前生成的仓库页面，点 code，复制 https链接<br>将其粘贴到我们记事本中的 repository：后面<br>然后保存退出<br>回到博客文件夹，git bash<br>安装自动部署发布工具</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<p>然后在Blog文件夹右键打开git bash，依次输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g	<span class="comment"># 生成</span></span><br><span class="line">hexo d	<span class="comment"># 上传</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果是第一次使用git的话会需要配置<br><code>git config --global user.email &quot;你的邮箱&quot;</code><br><code>git config --global user.name &quot;你的名字&quot;</code><br>配置完后再 hexo d 上传<br>在跳出来的窗口内进行登录<br>接下来我们就成功把本地内容上传到github了<br>上传成功以后，我们就算搭建好了！上自己的网址看看吧<br>网址是我们之前设的仓库名：<code>用户名.github.io</code></p>
</blockquote>
<p>文章参考🔗：<a class="link"   href="https://blog.fiveth.cc/p/bb32/#%E5%87%86%E5%A4%87%E5%B7%A5%E5%85%B7" >https://blog.fiveth.cc/p/bb32/#%E5%87%86%E5%A4%87%E5%B7%A5%E5%85%B7<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables(1) | iptables概念</title>
    <url>/2025/01/06/iptables-1-iptables%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p><strong>防火墙从逻辑上可以分为主机防火墙和网络防火墙</strong></p>
<p>主机防火墙：针对单个主机进行防护。</p>
<p>网络防火墙：往往处于网络入口，针对于网络入口进行防护，服务于防火墙背后的本地局域网。</p>
<p>网络防火墙和主机防火墙并不冲突，可以理解为，网络防火墙主外（集体）， 主机防火墙主内（个人）。</p>
<p><strong>防火墙从物理上可以分为硬件防火墙和软件防火墙</strong></p>
<p>硬件防火墙：硬件防火墙是一种专门设计的网络安全设备，它基于硬件平台运行，性能高，成本高。</p>
<p>软件防火墙：软件防火墙是安装在计算机操作系统或网络设备操作系统中的软件程序。性能低，成本低。<br>&nbsp;<br><br></p>
<h3 id="关于iptables"><a href="#关于iptables" class="headerlink" title="关于iptables"></a>关于iptables</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/iptbales.jpg"
                      style="zoom:33%;" 
                >
**iptables** 其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的”安全框架”中，这个”安全框架”才是真正的防火墙，这个框架的名字叫 **netfilter**。
<br>
netfilter 才是防火墙真正的安全框架（framework)，netfilter位于内核空间。 

<p>iptables 其实是一个命令行工具，位于用户空间，我们用这个工具操作真正的框架。</p>
<p>netfilter&amp;iptables 组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换（NAT）等功能。</p>
<p>Netfilter 是 Linux 内核中用于实现防火墙、网络地址转换 (NAT) 和包过滤的框架。<br>相关组件<br>iptables：最常用的用户空间工具，用于配置 Netfilter 规则。<br>nftables：是 iptables 的继任者，提供了更强大的功能和更简洁的语法。<br>&nbsp;<br><br></p>
<h3 id="iptables基础"><a href="#iptables基础" class="headerlink" title="iptables基础"></a>iptables基础</h3><p>我们知道iptables是按照规则来办事的，我们就来说说规则（rules），规则其实就是网络管理员预定义的条件，规则一般的定义为”如果数据包头符合这样的条件，就这样处理这个数据包”。规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包与规则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。配置防火墙的主要工作就是添加、修改和删除这些规则。<br><br><br>也就是说，当我们启用了防火墙功能时，报文需要经过如下关卡，那么根据实际情况的不同，报文经过”链”可能不同。如果报文需要转发，那么报文则不会经过input链发往用户空间，而是直接在内核空间中经过forward链和postrouting链转发出去的。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/lct.png"
                      style="zoom:50%;" 
                ></p>
<p>所以，根据上图，我们能够想象出某些常用场景中，报文的流向：<br>到本机某进程的报文：PREROUTING –&gt; INPUT<br>由本机转发的报文：PREROUTING –&gt; FORWARD –&gt; POSTROUTING<br>由本机的某进程发出报文（通常为响应报文）：OUTPUT –&gt; POSTROUTING<br><br></p>
<h3 id="链的概念"><a href="#链的概念" class="headerlink" title="链的概念"></a>链的概念</h3><p>现在，我们想象一下，这些”关卡”在iptables中为什么被称作”链”呢？我们知道，防火墙的作用就在于对经过的报文匹配”规则”，然后执行对应的”动作”,所以，当报文经过这些关卡的时候，则必须匹配这个关卡上的规则，但是，这个关卡上可能不止有一条规则，而是有很多条规则，当我们把这些规则串到一个链条上的时候，就形成了”链”,所以，我们把每一个”关卡”想象成如下图中的模样  ，这样来说，把他们称为”链”更为合适，每个经过这个”关卡”的报文，都要将这条”链”上的所有规则匹配一遍，如果有符合条件的规则，则执行规则对应的动作。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/69fa73eef0814250ac16d4afb81bba64.png#=x400"
                      style="zoom: 33%;" 
                ></p>
<h3 id="表的概念"><a href="#表的概念" class="headerlink" title="表的概念"></a>表的概念</h3><p>我们再想想另外一个问题，我们对每个”链”上都放置了一串规则，但是这些规则有些很相似，比如，A类规则都是对IP或者端口的过滤，B类规则是修改报文，那么这个时候，我们是不是能把实现相同功能的规则放在一起呢，必须能的。<br>&nbsp;<br>&nbsp;<br>我们把具有相同功能的规则的集合叫做”表”，所以说，不同功能的规则，我们可以放置在不同的表中进行管理，而iptables已经为我们定义了4种表，每种表对应了不同的功能，而我们定义的规则也都逃脱不了这4种功能的范围，所以，学习iptables之前，我们必须先搞明白每种表 的作用。<br>&nbsp;<br>iptables为我们提供了如下规则的分类，或者说，iptables为我们提供了如下”表”<br>&nbsp;<br>&nbsp;<br>filter表：负责过滤功能，防火墙；内核模块：iptables_filter </p>
<p>nat表：network address translation，网络地址转换功能；内核模块：iptable_nat </p>
<p>mangle表：拆解报文，做出修改，并重新封装 的功能；iptable_mangle </p>
<p>raw表：关闭nat表上启用的连接追踪机制；iptable_raw </p>
<p>也就是说，我们自定义的所有规则，都是这四种分类中的规则，或者说，所有规则都存在于这4张”表”中。<br><br></p>
<h3 id="表和链的关系"><a href="#表和链的关系" class="headerlink" title="表和链的关系"></a>表和链的关系</h3><p>某些”链”中注定不会包含”某类规则”，就像某些”关卡”天生就不具备某些功能一样，比如，A”关卡”只负责打击陆地敌人，没有防空能力，B”关卡”只负责打击空中敌人，没有防御步兵的能力，C”关卡”可能比较NB，既能防空，也能防御陆地敌人，D”关卡”最屌，海陆空都能防。</p>
<p>还是以图为例，先看看prerouting”链”上的规则都存在于哪些表中。<br><strong>注意：</strong> 下图只用于说明prerouting链上的规则存在于哪些表中，并没有描述表的顺序。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/97aa059eea79454f811eb25305ada1e6.png#=x200"
                      style="zoom: 33%;" 
                ></p>
<p>这幅图是什么意思呢？它的意思是说，prerouting”链”只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中。</p>
<p>那么，根据上述思路，我们来总结一下，每个”关卡”都拥有什么功能， 或者说，每个”链”中的规则都存在于哪些”表”中。</p>
<p>PREROUTING         的规则可以存在于：raw表、mangle表、nat表。 </p>
<p>INPUT                      的规则可以存在于：mangle表、filter表、nat表。</p>
<p>FORWARD              的规则可以存在于：mangle表、filter表。 </p>
<p>OUTPUT                  的规则可以存在于：raw表、mangle表、nat表、filter表。 </p>
<p>POSTROUTING      的规则可以存在于：mangle表、nat表。</p>
<p>但是，<strong>我们在实际的使用过程中，往往是通过”表”作为操作入口</strong>，对规则进行定义的，之所以按照上述过程介绍iptables，是因为从”关卡”的角度更容易从入门的角度理解，但是为了以便在实际使用的时候，更加顺畅的理解它们，此处我们还要将各”表”与”链”的关系罗列出来，<br>表（功能）&lt;–&gt;   链（钩子）：</p>
<p>raw     表中的规则可以被哪些链使用：PREROUTING，OUTPUT</p>
<p>mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p>
<p>nat     表中的规则可以被哪些链使用：PREROUTING，INPUT，OUTPUT，POSTROUTING</p>
<p>filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT</p>
<p>我们还需要注意一点，因为数据包经过一个”链”的时候，会将当前链的所有规则都匹配一遍，但是匹配时总归要有顺序，我们应该一条一条的去匹配，而且我们说过，相同功能类型的规则会汇聚在一张”表”中，那么，哪些”表”中的规则会放在”链”的最前面执行呢，这时候就需要有一个优先级的问题，我们还拿prerouting”链”做图示。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/27da89087e884fcc89185420e62de5a6.png#"
                      style="zoom:33%;" 
                ></p>
<p>prerouting链中的规则存放于三张表中，而这三张表中的规则执行的优先级如下：<br>raw –&gt; mangle –&gt; nat</p>
<p>但是我们知道，iptables为我们定义了4张”表”,当他们处于同一条”链”时，执行的优先级如下<br>优先级次序（由高而低）： raw –&gt; mangle –&gt; nat –&gt; filter</p>
<p>我们前面说过，某些链天生就不能使用某些表中的规则，所以，4张表中的规则处于同一条链的目前只有output链，它就是传说中海陆空都能防守的关卡。</p>
<h3 id="数据经过防火墙的流程"><a href="#数据经过防火墙的流程" class="headerlink" title="数据经过防火墙的流程"></a>数据经过防火墙的流程</h3><p>结合上述所有的描述，我们可以将数据包通过防火墙的流程总结为下图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/8a4b1c4971074ab09277bfa300f33a04.png"
                     
                ></p>
<p>我们在写Iptables规则的时候，要时刻牢记这张路由次序图，灵活配置规则。</p>
<p>我们将经常用到的对应关系重新写在此处，方便对应图例查看。<br><br><br>链的规则存放于哪些表中（从链到表的对应关系）：</p>
<p>PREROUTING         的规则可以存在于：raw表、mangle表、nat表。 </p>
<p> INPUT                      的规则可以存在于：mangle表、filter表、nat表。</p>
<p> FORWARD              的规则可以存在于：mangle表、filter表。 </p>
<p> OUTPUT                  的规则可以存在于：raw表、mangle表、nat表、filter表。 </p>
<p> POSTROUTING      的规则可以存在于：mangle表、nat表。<br> <br><br> 表中的规则可以被哪些链使用（从表到链的对应关系）：</p>
<p> raw     表中的规则可以被哪些链使用：PREROUTING，OUTPUT</p>
<p> mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p>
<p> nat     表中的规则可以被哪些链使用：PREROUTING，INPUT，OUTPUT，POSTROUTING</p>
<p> filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT<br> &nbsp;<br> <br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/a5077250afe74664a78aba3ef7a0e6fe.png"
                      style="zoom:33%;" 
                ></p>
<h3 id="规则的概念"><a href="#规则的概念" class="headerlink" title="规则的概念"></a>规则的概念</h3><p>规则：根据指定的匹配条件来尝试匹配每个流经此处的报文，一旦匹配成功，则由规则后面指定的处理动作进行处理；   </p>
<p>那么我们来通俗的解释一下什么是iptables的规则，之前打过一个比方，每条”链”都是一个”关卡”，每个通过这个”关卡”的报文都要匹配这个关卡上的规则，如果匹配，则对报文进行对应的处理，比如说，你我二人此刻就好像两个”报文”，你我二人此刻都要入关，可是城主有命，只有器宇轩昂的人才能入关，不符合此条件的人不能入关，于是守关将士按照城主制定的”规则”，开始打量你我二人，最终，你顺利入关了，而我已被拒之门外，因为你符合”器宇轩昂”的标准，所以把你”放行”了，而我不符合标准，所以没有被放行，其实，”器宇轩昂”就是一种”匹配条件”，”放行”就是一种”动作”，”匹配条件”与”动作”组成了规则。</p>
<p><strong>规则由 匹配条件 和 处理动作 组成</strong><br><strong>匹配条件</strong><br>匹配条件分为基本匹配条件与扩展匹配条件</p>
<p>基本匹配条件：<br>源地址Source IP，目标地址 Destination IP </p>
<p>上述内容都可以作为基本匹配条件。</p>
<p>扩展匹配条件：<br>除了上述的条件可以用于匹配，还有很多其他的条件可以用于匹配，这些条件泛称为扩展条件，这些扩展条件其实也是netfilter中的一部分，只是以模块的形式存在，如果想要使用这些条件，则需要依赖对应的扩展模块。 </p>
<p>源端口Source Port, 目标端口Destination Port </p>
<p>上述内容都可以作为扩展匹配条件</p>
<p><strong>处理动作</strong><br>一些常用的动作：</p>
<p>ACCEPT：允许数据包通过。 </p>
<p>DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。 </p>
<p>REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。 </p>
<p>SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。 </p>
<p>MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。 </p>
<p>DNAT：目标地址转换。 </p>
<p>REDIRECT：在本机做端口映射。 </p>
<p>LOG：在&#x2F;var&#x2F;log&#x2F;messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。<br><br></p>
<h3 id="★-°-☆-￣▽￣-°★-。"><a href="#★-°-☆-￣▽￣-°★-。" class="headerlink" title="★,°:.☆(￣▽￣)&#x2F;$:.°★ 。"></a><em>★,°</em>:.☆(￣▽￣)&#x2F;$:<em>.°★</em> 。</h3>]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的三种安装方式</title>
    <url>/2025/05/14/MySQL%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>GO GO GO</p>
<blockquote>
<p>这里使用机器为 Rocky Linux 9.4 </p>
</blockquote>
<h4 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 从官方选择对应的 mysql 源码包</span></span><br><span class="line"><span class="comment"># https://dev.mysql.com/downloads/mysql/mysql-8.4.3-linux-glibc2.28-x86_64.tar.xz</span></span><br><span class="line"><span class="comment"># 上传下载好的压缩包到指定服务器 </span></span><br><span class="line">wget https://dev.mysql.com/get/Downloads/mysql/mysql-8.4.3-linux-glibc2.28-x86_64.tar.xz</span><br><span class="line">tar -xvf mysql-8.4.3-linux-glibc2.28-x86_64.tar.xz </span><br><span class="line"><span class="built_in">mv</span> mysql-8.4.3-linux-glibc2.28-x86_64 /usr/local/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建mysql用户，因为启动mysql需要该用户</span></span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql -s /bin/false mysql -M </span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/mysql</span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /data/mysql</span><br><span class="line"><span class="built_in">chmod</span> -R 750 /data/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 初始化</span></span><br><span class="line">/usr/local/mysql/bin/mysqld --initialize-insecure --basedir=/usr/local/mysql --datadir=/data/mysql --user=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 以服务的方式启动（传统方式，可选）</span></span><br><span class="line"><span class="comment"># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql.server</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># /etc/init.d/mysql.server start</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/usr/local/mysql/bin&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment">## 将传统的以服务启动的方式改为 systemd 进行管理</span></span><br><span class="line"><span class="comment">## 首先关闭 selinux ！！！</span></span><br><span class="line"><span class="comment">## 在/etc/systemd/system/目录下配置文件 mysql.service</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/mysql.service &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=MySQL Server</span></span><br><span class="line"><span class="string">After=network.target syslog.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">User=mysql</span></span><br><span class="line"><span class="string">Group=mysql</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span></span><br><span class="line"><span class="string">ExecReload=/bin/kill -HUP $MAINPID</span></span><br><span class="line"><span class="string">Restart=on-failure</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target    </span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置默认文件缺失</span></span><br><span class="line"><span class="comment"># MySQL 不会在二进制安装时自动生成 my.cnf 文件，因为它无法确定需要的具体配置。这就意味着你得手动创建该文件。</span></span><br><span class="line"><span class="comment"># 在 ExecStart 行中启动命令后添加 --defaults-file=/etc/my.cnf 参数进行配置文件关联</span></span><br><span class="line"><span class="comment"># 创建 my.cnf 文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/my.cnf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string"># 基本目录</span></span><br><span class="line"><span class="string">basedir = /usr/local/mysql</span></span><br><span class="line"><span class="string"># 数据目录</span></span><br><span class="line"><span class="string">datadir = /data/mysql</span></span><br><span class="line"><span class="string"># PID文件路径</span></span><br><span class="line"><span class="string">pid-file = /data/mysql/mysql.pid</span></span><br><span class="line"><span class="string"># 套接字文件路径</span></span><br><span class="line"><span class="string">socket = /tmp/mysql.sock</span></span><br><span class="line"><span class="string"># 监听端口</span></span><br><span class="line"><span class="string">port = 3306</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 其他常见配置</span></span><br><span class="line"><span class="string"># 字符集设置</span></span><br><span class="line"><span class="string">character-set-server = utf8mb4</span></span><br><span class="line"><span class="string">collation-server = utf8mb4_unicode_ci</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 日志相关配置</span></span><br><span class="line"><span class="string">log-error = /data/mysql/error.log</span></span><br><span class="line"><span class="string">general_log = 0</span></span><br><span class="line"><span class="string">general_log_file = /data/mysql/general.log</span></span><br><span class="line"><span class="string">slow_query_log = 1</span></span><br><span class="line"><span class="string">slow_query_log_file = /data/mysql/slow.log</span></span><br><span class="line"><span class="string">long_query_time = 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 内存相关配置</span></span><br><span class="line"><span class="string">innodb_buffer_pool_size = 128M</span></span><br><span class="line"><span class="string">key_buffer_size = 16M</span></span><br><span class="line"><span class="string">EOF</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋权</span></span><br><span class="line"><span class="built_in">chmod</span> 644 /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart mysql</span><br><span class="line">systemctl status mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下命令可查看 MySQL 所有的配置选项及其当前值</span></span><br><span class="line">SHOW VARIABLES;</span><br></pre></td></tr></table></figure></div>

<h4 id="从源码编译安装"><a href="#从源码编译安装" class="headerlink" title="从源码编译安装"></a>从源码编译安装</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 从官方选择对应的 mysql 源码包</span></span><br><span class="line"><span class="comment"># https://dev.mysql.com/downloads/mysql/</span></span><br><span class="line"><span class="comment"># 上传下载好的压缩包到指定服务器</span></span><br><span class="line">wget https://dev.mysql.com/get/Downloads/mysql/mysql-8.4.3.tar.gz</span><br><span class="line">tar -zxvf mysql-8.4.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> mysql-8.4.3</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载必要的软件包</span></span><br><span class="line">yum install -y gcc gcc-c++ make cmake ncurses-devel bison wget tar bzip2 zlib zlib-devel gcc-toolset-12-gcc gcc-toolset-12-gcc-c++ gcc-toolset-12-binutils gcc-toolset-12-annobin-annocheck gcc-toolset-12-annobin-plugin-gcc openssl openssl-devel </span><br><span class="line"><span class="built_in">sudo</span> dnf install -y rpcgen</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装libtirpc-devel</span></span><br><span class="line">yum install -y libtirpc-devel <span class="comment"># 这个一般不行</span></span><br><span class="line"></span><br><span class="line">wget https://rpmfind.net/linux/centos-stream/9-stream/BaseOS/x86_64/os/Packages/libtirpc-1.3.3-2.el9.x86_64.rpm</span><br><span class="line">rpm -ivh libtirpc-1.3.3-2.el9.x86_64.rpm</span><br><span class="line"><span class="comment"># sudo rpm -Uvh --oldpackage libtirpc-1.3.3-2.el9.x86_64.rpm    -U:有则升级，无则安装。</span></span><br><span class="line"></span><br><span class="line">wget https://rpmfind.net/linux/centos-stream/9-stream/CRB/x86_64/os/Packages/libtirpc-devel-1.3.3-2.el9.x86_64.rpm</span><br><span class="line">rpm -ivh libtirpc-devel-1.3.3-2.el9.x86_64.rpm </span><br><span class="line"></span><br><span class="line"><span class="comment"># 依赖环境</span></span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">wget https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.bz2</span><br><span class="line">tar -jxvf boost_1_77_0.tar.bz2</span><br><span class="line"></span><br><span class="line"><span class="comment"># build 是个空目录</span></span><br><span class="line"><span class="built_in">cd</span> mysql-8.4.3/build/</span><br><span class="line"><span class="comment"># 到MySQL源码的build目录（个人新建）并运行cmake命令，以继续配置和编译MySQL：</span></span><br><span class="line">cmake .. -DWITH_BOOST=/root/boost_1_77_0 \</span><br><span class="line">         -DWITH_ZLIB=bundled \</span><br><span class="line">         -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">         -DMYSQL_DATADIR=/usr/local/mysql/data \</span><br><span class="line">         -DSYSCONFDIR=/etc \</span><br><span class="line">         -DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">         -DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">         -DWITH_FEDERATED_STORAGE_ENGINE=1 \</span><br><span class="line">         -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">         -DWITH_ARCHIVE_STORAGE_ENGINE=1 \</span><br><span class="line">         -DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">         -DWITH_SSL=system \</span><br><span class="line">         -DWITH_LIBWRAP=0 \</span><br><span class="line">         -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock</span><br><span class="line">         </span><br><span class="line"><span class="comment"># 编译 MySQL</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 MySQL</span></span><br><span class="line">make install </span><br><span class="line"></span><br><span class="line"><span class="comment">## 开始配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建mysql用户和配置权限</span></span><br><span class="line"><span class="comment"># 创建一个名为 mysql 的用户组</span></span><br><span class="line">groupadd mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># -r表示创建一个系统用户（system user），这种用户通常用于运行服务或系统进程，没有登录权限。</span></span><br><span class="line"><span class="comment"># -g mysql：指定用户的主组为 mysql，让该用户属于前面创建的 mysql 用户组。</span></span><br><span class="line"><span class="comment"># -s /bin/false：指定用户的默认登录 shell 为 /bin/false，这样做的目的是不允许该用户登录系统，进一步增强安全性。</span></span><br><span class="line">useradd -r -g mysql -s /bin/false mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## /etc/my.cnf</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/my.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]  # 表示这是 MySQL 服务的配置部分</span></span><br><span class="line"><span class="string">basedir = /usr/local/mysql  # 设置 MySQL 的安装目录为 /usr/local/mysql</span></span><br><span class="line"><span class="string">datadir = /usr/local/mysql/data  # 设置 MySQL 的数据存储目录为 /usr/local/mysql/data</span></span><br><span class="line"><span class="string">port = 3306  # 指定 MySQL 服务监听的端口号为 3306，这是 MySQL 的默认端口</span></span><br><span class="line"><span class="string">socket = /var/lib/mysql/mysql.sock  # 指定 MySQL 进程的 socket 文件路径，用于本地客户端连接</span></span><br><span class="line"><span class="string">user = mysql  # 指定运行 MySQL 服务的用户为 mysql，增加安全性</span></span><br><span class="line"><span class="string">symbolic-links = 0  # 禁用符号链接功能，增加系统安全性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">log_error = /var/log/mysql/error.log  # 设置错误日志文件的路径，记录 MySQL 服务的错误信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">general_log = 1  # 启用通用查询日志，记录所有执行的查询语句</span></span><br><span class="line"><span class="string">general_log_file = /var/log/mysql/general.log  # 设置通用查询日志的存储路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">slow_query_log = 1  # 启用慢查询日志，用于记录执行时间较长的查询</span></span><br><span class="line"><span class="string">slow_query_log_file = /var/log/mysql/slow.log  # 指定慢查询日志文件的路径</span></span><br><span class="line"><span class="string">long_query_time = 2  # 设置慢查询的阈值，记录执行时间超过 2 秒的查询</span></span><br><span class="line"><span class="string"># pid-file = /var/run/mysqld/mysqld.pid</span></span><br><span class="line"><span class="string">pid-file=/usr/local/mysql/mysqld.pid </span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/log/mysql</span><br><span class="line"><span class="comment"># mkdir -p /var/run/mysqld</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql logs for /var/log/mysql</span></span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /var/log/mysql</span><br><span class="line"><span class="built_in">chmod</span> -R 750 /var/log/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># /usr/local/mysql 安装主目录</span></span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /usr/local/mysql</span><br><span class="line"><span class="built_in">chmod</span> -R 750 /usr/local/mysql</span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/mysql/data</span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /usr/local/mysql/data</span><br><span class="line"><span class="built_in">chmod</span> -R 750 /usr/local/mysql/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># /var/run/mysqld/mysqld.pid</span></span><br><span class="line"><span class="comment"># chown mysql:mysql /var/run/mysqld</span></span><br><span class="line"><span class="comment"># chmod 755 /var/run/mysqld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /var/lib/mysql/mysql.sock </span></span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /var/lib/mysql</span><br><span class="line"><span class="built_in">chmod</span> -R 750 /var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 初始化</span></span><br><span class="line">/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf --initialize-insecure</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动 mysql 服务</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/mysql.service&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=MySQL Server</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span></span><br><span class="line"><span class="string">ExecStop=/usr/local/mysql/bin/mysqladmin --defaults-file=/etc/my.cnf shutdown</span></span><br><span class="line"><span class="string">User=mysql</span></span><br><span class="line"><span class="string">Group=mysql</span></span><br><span class="line"><span class="string">PIDFile=/var/run/mysqld/mysqld.pid</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> mysql</span><br><span class="line">systemctl start mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置个root密码</span></span><br><span class="line">/usr/local/mysql/bin/mysql_secure_installation</span><br><span class="line"><span class="comment"># Ag#@190&#125;678900 # 我的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到系统环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/mysql/bin</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">mysql -uroot -pAg#@190&#125;678900</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建个远程管理用户</span></span><br><span class="line"><span class="comment"># 开启远程连接</span></span><br><span class="line">CREATE USER <span class="string">&#x27;sxs&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Ag#@190&#125;678900&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;sxs&#x27;</span>@<span class="string">&#x27;%&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></div>

<h4 id="yum-安装方式"><a href="#yum-安装方式" class="headerlink" title="yum 安装方式"></a>yum 安装方式</h4><hr>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">- 本地系统源安装</span><br><span class="line"></span><br><span class="line">    yum -y install mysql    <span class="comment"># 安装的 mysql软件包包含了 MySQL 客户端程序等组件。</span></span><br><span class="line">    <span class="comment">## 这使得用户能够在命令行下连接到远程 MySQL 服务器进行数据库操作，如查询数据库、执行 SQL 语句等。</span></span><br><span class="line">    </span><br><span class="line">    yum -y install mysql-server     <span class="comment"># 安装 MySQL 服务器相关的软件包。</span></span><br><span class="line">    <span class="comment">## 这个命令会安装 MySQL 服务器软件，使得计算机能够作为一个 MySQL 服务器运行，接受客户端的连接请求并处理数据库事务。</span></span><br></pre></td></tr></table></figure></div>

<hr>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">- 官方源安装（脱离了系统源）</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 从官方选择对应的操作系统的 mysql 安装源</span></span><br><span class="line">    <span class="comment"># https://dev.mysql.com/downloads/</span></span><br><span class="line">    <span class="comment"># 上传下载好的 rpm 包到指定服务器</span></span><br><span class="line">     scp .\mysql84-community-release-el9-1.noarch.rpm root@192.168.241.130:/root   </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 安装下载好的源</span></span><br><span class="line">    dnf install -y mysql84-community-release-el9-1.noarch.rpm</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 安装 MySQL 服务器及其依赖项</span></span><br><span class="line">    <span class="built_in">sudo</span> dnf install mysql-server</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动 MySQL 服务并设置开机自启</span></span><br><span class="line">    <span class="built_in">sudo</span> systemctl --now <span class="built_in">enable</span> mysqld</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取临时密码</span></span><br><span class="line">    grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 登录并修改密码</span></span><br><span class="line">    mysql -uroot -p</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查看安全策略（可选）</span></span><br><span class="line">    SHOW VARIABLES LIKE <span class="string">&#x27;validate_password%&#x27;</span>;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 降低安全策略（可选，主要是为了学习或者测试时设置简单的密码方便记忆）</span></span><br><span class="line">    <span class="built_in">set</span> global validate_password.policy=0;</span><br><span class="line">    <span class="built_in">set</span> global validate_password.length=1;</span><br></pre></td></tr></table></figure></div>




<h4 id="通过-MySQL-安装向导（适用于-Windows-环境）"><a href="#通过-MySQL-安装向导（适用于-Windows-环境）" class="headerlink" title="通过 MySQL 安装向导（适用于 Windows 环境）"></a>通过 MySQL 安装向导（适用于 Windows 环境）</h4>]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的三种模式解析</title>
    <url>/2025/05/14/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>工作原理：</p>
<ol>
<li><p>slave启动后，向master发送SYNC命令，master接收到SYNC命令后通过bgsave保存快照（即上文所介绍的RDB持久化），并使用缓冲区记录保存快照这段时间内执行的写命令</p>
</li>
<li><p>master将保存的快照文件发送给slave，并继续记录执行的写命令</p>
</li>
<li><p>slave接收到快照文件后，加载快照文件，载入数据</p>
</li>
<li><p>master快照发送完后开始向slave发送缓冲区的写命令，slave接收命令并执行，完成复制初始化</p>
</li>
<li><p>此后master每次执行一个写命令都会同步发送给slave，保持master与slave之间数据的一致性</p>
</li>
</ol>
<div style="text-align: center;">
  <figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/redis01.jpg"
                      alt="图1-主从复制" width="60%"
                ><figcaption>图1-主从复制</figcaption></figure>
</div>

<p>优点：</p>
<ol>
<li><p>master能自动将数据同步到slave，可以进行读写分离，分担master的读压力</p>
</li>
<li><p>master、slave之间的同步是以非阻塞的方式进行的，同步期间，客户端仍然可以提交查询或更新请求</p>
</li>
</ol>
<p>缺点：</p>
<ol>
<li><p>不具备自动容错与恢复功能，master或slave的宕机都可能导致客户端请求失败，需要等待机器重启或手动切换客户端IP才能恢复</p>
</li>
<li><p>master宕机，如果宕机前数据没有同步完，则切换IP后会存在数据不一致的问题</p>
</li>
<li><p>难以支持在线扩容，Redis的容量受限于单机配置</p>
</li>
</ol>
<h3 id="Sentinel（哨兵）"><a href="#Sentinel（哨兵）" class="headerlink" title="Sentinel（哨兵）"></a>Sentinel（哨兵）</h3><p>哨兵模式基于主从复制模式，只是引入了哨兵来监控与自动处理故障。</p>
<p>功能主要包括：</p>
<p>1、监控master、slave是否正常运行</p>
<p>2、当master出现故障时，能自动将一个slave转换为master（大哥挂了，选一个小弟上位）</p>
<p>3、多个哨兵可以监控同一个Redis，哨兵之间也会自动监控</p>
<div style="text-align: center;">
  <figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/redis02.jpg"
                      
       alt="图2-哨兵模式" 
       width="60%"
                ><figcaption>图2-哨兵模式</figcaption></figure> <!-- 可按需调整宽度百分比，如50%、70% -->
</div>

<p>工作原理：</p>
<p>哨兵模式的具体工作机制： 在配置文件中通过 sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt; 来定位master的IP、端口，一个哨兵可以监控多个master数据库，只需要提供多个该配置项即可。哨兵启动后，会与要监控的master建立两条连接：</p>
<ol>
<li><p>一条连接用来订阅master的_sentinel_:hello频道与获取其他监控该master的哨兵节点信息</p>
</li>
<li><p>另一条连接定期向master发送INFO等命令获取master本身的信息</p>
</li>
</ol>
<p>与master建立连接后，哨兵会执行三个操作：</p>
<ol>
<li><p>定期（一般10s一次，当master被标记为主观下线时，改为1s一次）向master和slave发送INFO命令</p>
</li>
<li><p>定期向master和slave的_sentinel_:hello频道发送自己的信息</p>
</li>
<li><p>定期（1s一次）向master、slave和其他哨兵发送PING命令</p>
</li>
</ol>
<p>发送INFO命令可以获取当前数据库的相关信息从而实现新节点的自动发现。所以说哨兵只需要配置master数据库信息就可以自动发现其slave信息。获取到slave信息后，哨兵也会与slave建立两条连接执行监控。通过INFO命令，哨兵可以获取主从数据库的最新信息，并进行相应的操作，比如角色变更等。</p>
<p>接下来哨兵向主从数据库的_sentinel_:hello频道发送信息与同样监控这些数据库的哨兵共享自己的信息，发送内容为哨兵的ip端口、运行id、配置版本、master名字、master的ip端口还有master的配置版本。这些信息有以下用处：</p>
<ol>
<li><p>其他哨兵可以通过该信息判断发送者是否是新发现的哨兵，如果是的话会创建一个到该哨兵的连接用于发送PING命令。</p>
</li>
<li><p>其他哨兵通过该信息可以判断master的版本，如果该版本高于直接记录的版本，将会更新</p>
</li>
<li><p>当实现了自动发现slave和其他哨兵节点后，哨兵就可以通过定期发送PING命令定时监控这些数据库和节点有没有停止服务。</p>
</li>
</ol>
<p>如果被PING的数据库或者节点超时（通过 sentinel down-after-milliseconds master-name milliseconds 配置）未回复，哨兵认为其主观下线（sdown，s就是Subjectively —— 主观地）。如果下线的是master，哨兵会向其它哨兵发送命令询问它们是否也认为该master主观下线，如果达到一定数目（即配置文件中的quorum）投票，哨兵会认为该master已经客观下线（odown，o就是Objectively —— 客观地），并选举领头的哨兵节点对主从系统发起故障恢复。若没有足够的sentinel进程同意master下线，master的客观下线状态会被移除，若master重新向sentinel进程发送的PING命令返回有效回复，master的主观下线状态就会被移除</p>
<div style="text-align: center;">
  <figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/redis03.jpg"
                      
       alt="图3" 
       width="60%"
                ><figcaption>图3</figcaption></figure> <!-- 可按需调整宽度百分比，如50%、70% -->
</div>

<p>哨兵认为master客观下线后，故障恢复的操作需要由选举的领头哨兵来执行，选举采用Raft算法：</p>
<ol>
<li><p>发现master下线的哨兵节点（我们称他为A）向每个哨兵发送命令，要求对方选自己为领头哨兵</p>
</li>
<li><p>如果目标哨兵节点没有选过其他人，则会同意选举A为领头哨兵</p>
</li>
<li><p>如果有超过一半的哨兵同意选举A为领头，则A当选</p>
</li>
<li><p>如果有多个哨兵节点同时参选领头，此时有可能存在一轮投票无竞选者胜出，此时每个参选的节点等待一个随机时间后再次发起参选请求，进行下一轮投票竞选，直至选举出领头哨兵</p>
</li>
</ol>
<p>选出领头哨兵后，领头者开始对系统进行故障恢复，从出现故障的master的从数据库中挑选一个来当选新的master,选择规则如下：</p>
<ol>
<li><p>所有在线的slave中选择优先级最高的，优先级可以通过slave-priority配置</p>
</li>
<li><p>如果有多个最高优先级的slave，则选取复制偏移量最大（即复制越完整）的当选</p>
</li>
<li><p>如果以上条件都一样，选取id最小的slave</p>
</li>
</ol>
<p>挑选出需要继任的slave后，领头哨兵向该数据库发送命令使其成为master，然后再向其他slave发送命令接受新的master，最后更新数据。将已经停止的旧的master更新为新的master的从数据库，使其恢复服务后以slave的身份继续运行。</p>
<p>优点：</p>
<ol>
<li><p>哨兵模式基于主从复制模式，所以主从复制模式有的优点，哨兵模式也有</p>
</li>
<li><p>哨兵模式下，master挂掉可以自动进行切换，系统可用性更高</p>
</li>
</ol>
<p>缺点：</p>
<ol>
<li><p>同样也继承了主从模式难以在线扩容的缺点，Redis的容量受限于单机配置</p>
</li>
<li><p>需要额外的资源来启动sentinel进程，实现相对复杂一点，同时slave节点作为备份节点不提供服务</p>
</li>
</ol>
<h3 id="Cluster集群"><a href="#Cluster集群" class="headerlink" title="Cluster集群"></a>Cluster集群</h3><p>哨兵模式解决了主从复制不能自动故障转移，达不到高可用的问题，但还是存在难以在线扩容，Redis容量受限于单机配置的问题。Cluster模式实现了Redis的分布式存储，即每台节点存储不同的内容，来解决在线扩容的问题。</p>
<div style="text-align: center;">
  <figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/redis04.jpg"
                      
       alt="图4-集群模式" 
       width="60%"
                ><figcaption>图4-集群模式</figcaption></figure> <!-- 可按需调整宽度百分比，如50%、70% -->
</div>

<p>工作原理：</p>
<ol>
<li><p>在Redis的每个节点上，都有一个插槽（slot），取值范围为0-16383</p>
</li>
<li><p>当我们存取key的时候，Redis会根据CRC16的算法得出一个结果，然后把结果对16384求余数，这样每个key都会对应一个编号在0-16383之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作</p>
</li>
<li><p>为了保证高可用，Cluster模式也引入主从复制模式，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点</p>
</li>
<li><p>当其它主节点ping一个主节点A时，如果半数以上的主节点与A通信超时，那么认为主节点A宕机了。如果主节点A和它的从节点都宕机了，那么该集群就无法再提供服务了 Cluster模式集群节点最小配置6个节点(3主3从，因为需要半数以上)，其中主节点提供读写操作，从节点作为备用节点，不提供请求，只作为故障转移使用</p>
</li>
</ol>
<p>优点：</p>
<ol>
<li><p>无中心架构，数据按照slot分布在多个节点。</p>
</li>
<li><p>集群中的每个节点都是平等的关系，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。</p>
</li>
<li><p>可线性扩展到1000多个节点，节点可动态添加或删除</p>
</li>
<li><p>能够实现自动故障转移，节点之间通过gossip协议交换状态信息，用投票机制完成slave到master的角色转换</p>
</li>
</ol>
<p>缺点：</p>
<ol>
<li><p>客户端实现复杂，驱动要求实现Smart Client，缓存slots mapping信息并及时更新，提高了开发难度。目前仅JedisCluster相对成熟，异常处理还不完善，比如常见的“max redirect exception”</p>
</li>
<li><p>节点会因为某些原因发生阻塞（阻塞时间大于 cluster-node-timeout）被判断下线，这种failover是没有必要的 3. 数据通过异步复制，不保证数据的强一致性</p>
</li>
<li><p>slave充当“冷备”，不能缓解读压力</p>
</li>
<li><p>批量操作限制，目前只支持具有相同slot值的key执行批量操作，对mset、mget、sunion等操作支持不友好</p>
</li>
<li><p>key事务操作支持有线，只支持多key在同一节点的事务操作，多key分布不同节点时无法使用事务功能</p>
</li>
<li><p>不支持多数据库空间，单机redis可以支持16个db，集群模式下只能使用一个，即db 0 Redis Cluster模式不建议使用pipeline和multi-keys操作，减少max redirect产生的场景。</p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了Redis集群方案的三种模式，其中主从复制模式能实现读写分离，但是不能自动故障转移；哨兵模式基于主从复制模式，能实现自动故障转移，达到高可用，但与主从复制模式一样，不能在线扩容，容量受限于单机的配置；Cluster模式通过无中心化架构，实现分布式存储，可进行线性扩展，也能高可用，但对于像批量操作、事务操作等的支持性不够好。三种模式各有优缺点，可根据实际场景进行选择。</p>
<blockquote>
<p>注：发现问题请联系我进行订正，感谢🌹🌹</p>
</blockquote>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>对称秘钥和非对称秘钥</title>
    <url>/2025/05/22/%E5%AF%B9%E7%A7%B0%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>对称加密使用同一个秘钥来进行加密和解密<br>对称加密算法有：RC4、DES、3DES、<mark>AES</mark> 等<br>加密算法根据同一个秘钥将明文加密成密文，或将密文解密成明文 </p>
<div style="text-align: center;">
  <figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/%E5%AF%B9%E7%A7%B0%E7%A7%98%E9%92%A5.png"
                      alt="对称加密" width="60%"
                ><figcaption>对称加密</figcaption></figure>
</div>

<blockquote>
<p>问题来了<br>    对称秘钥如果明文传输，可以被第三方拿到，使得第三方也可以解密密文<br>    对称秘钥如果密文传输，接收端如何解密秘钥</p>
</blockquote>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>非对称加密使用公钥和私钥两种秘钥，它们并不是同一个秘钥<br>公钥用来加密明文，私钥用来解密密文<br>公钥一般是公开的，都能拿到，私钥只有接收端才有，不公开<br>非对称加密算法有：<mark>RSA</mark>、DH 等</p>
<blockquote>
<p>非对称加密的加解密速度比对称加密要慢很多</p>
</blockquote>
<p>工作原理：发送端使用公钥加密，接收端使用私钥解密；公钥和私钥由接收端生成，公钥明文传输给发送端，发送端收到后使用公钥将数据加密后发送到接收端，接收端使用私钥解密，公钥被第三方截获也没关系，因为第三方没有私钥</p>
<div style="text-align: center;">
  <figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E7%A7%98%E9%92%A5.png"
                      alt="非对称加密" width="60%"
                ><figcaption>非对称加密</figcaption></figure>
</div>




<h3 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h3><p>对称加密不能安全的传输密钥，但是加解密速度块<br>非对陈加密可以安全的传输密钥，但是加解密速度慢<br>🤔🤔<br>使用非对称加密解决对称秘钥的传输问题，使用对称加密传输数据</p>
<blockquote>
<p>SSL&#x2F;TLS 使用的就是混合加密</p>
</blockquote>
<div style="text-align: center;">
  <figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://byte76-1325194493.cos.ap-beijing.myqcloud.com/test/%E6%B7%B7%E5%90%88%E5%8A%A0%E5%AF%86.png"
                      alt="混合加密" width="75%"
                ><figcaption>混合加密</figcaption></figure>
</div>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>天气预报自动推送</title>
    <url>/2024/10/07/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<h4 id="一、申请微信测试公众号（https-mp-weixin-qq-com-debug-cgi-bin-sandbox-t-sandbox-login）"><a href="#一、申请微信测试公众号（https-mp-weixin-qq-com-debug-cgi-bin-sandbox-t-sandbox-login）" class="headerlink" title="一、申请微信测试公众号（https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login）"></a>一、申请微信测试公众号（<a class="link"   href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login%EF%BC%89" >https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><ol>
<li><p>获取到这四个值 appID, appSecret, openId, template_id</p>
</li>
<li><p>想让谁收消息，谁就用微信扫二维码，刷新页面后即出现在用户列表，获取微信号（openId）</p>
</li>
<li><p>新增测试模板获得  template_id（模板ID）</p>
<p> 天气模板：</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">今天：&#123;&#123;date.DATA&#125;&#125;</span><br><span class="line">地区：&#123;&#123;region.DATA&#125;&#125;</span><br><span class="line">天气：&#123;&#123;weather.DATA&#125;&#125;</span><br><span class="line">气温：&#123;&#123;temp.DATA&#125;&#125;</span><br><span class="line">风向：&#123;&#123;wind_dir.DATA&#125;&#125;</span><br><span class="line">对你说的话：&#123;&#123;today_note.DATA&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p> 课程表模板：</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">消息：&#123;&#123;message.DATA&#125;&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<hr>
<h4 id="二、配置代码"><a href="#二、配置代码" class="headerlink" title="二、配置代码"></a>二、配置代码</h4><ol>
<li><p>将上面获得的几个值填入代码这几行，启动即可</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">appID = &quot;&quot;</span><br><span class="line">appSecret = &quot;&quot;</span><br><span class="line">#收信人ID即 用户列表中的微信号，见上文</span><br><span class="line">openId = &quot;&quot;</span><br><span class="line"># 天气预报模板ID</span><br><span class="line">weather_template_id = &quot;&quot;</span><br><span class="line"># 时间表模板ID</span><br><span class="line">timetable_template_id = &quot;&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>定时任务（根据需求进行修改这几行）</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">schedule.every().day.at(&quot;08:00&quot;).do(weather_report, &quot;北京&quot;)</span><br><span class="line"># schedule.every().monday.at(&quot;13:30&quot;).do(timetable, &quot;还有15分钟开始下午的课程&quot;)</span><br><span class="line">while True:</span><br><span class="line">   schedule.run_pending()</span><br><span class="line">   time.sleep(1)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>完成代码如下</p>
 <div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖 pip3 install requests html5lib bs4 schedule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从测试号信息获取</span></span><br><span class="line">appID = <span class="string">&quot;wx1c904b832908e3d7&quot;</span></span><br><span class="line">appSecret = <span class="string">&quot;024e7a99b9bd93e4ec2ba0e61cb99869&quot;</span></span><br><span class="line"><span class="comment">#收信人ID即 用户列表中的微信号，见上文</span></span><br><span class="line">openId = <span class="string">&quot;oLg156sEhzpHX3f6OKG6HaCTid9s&quot;</span></span><br><span class="line"><span class="comment"># 天气预报模板ID</span></span><br><span class="line">weather_template_id = <span class="string">&quot;T00eYDomN3GOBXOTqTYhX27Nqp-vCdDO2xHKAK1ElH8&quot;</span></span><br><span class="line"><span class="comment"># 时间表模板ID</span></span><br><span class="line">timetable_template_id = <span class="string">&quot;kg29LwRP6--uo6Xq3mm-aRyJFaF_Pe2SsnUjYq23YpA&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">my_city</span>):</span><br><span class="line">    urls = [<span class="string">&quot;http://www.weather.com.cn/textFC/hb.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/db.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/hd.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/hz.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/hn.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/xb.shtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.weather.com.cn/textFC/xn.shtml&quot;</span></span><br><span class="line">            ]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        resp = requests.get(url)</span><br><span class="line">        text = resp.content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        soup = BeautifulSoup(text, <span class="string">&#x27;html5lib&#x27;</span>)</span><br><span class="line">        div_conMidtab = soup.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;conMidtab&quot;</span>)</span><br><span class="line">        tables = div_conMidtab.find_all(<span class="string">&quot;table&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> table <span class="keyword">in</span> tables:</span><br><span class="line">            trs = table.find_all(<span class="string">&quot;tr&quot;</span>)[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">for</span> index, tr <span class="keyword">in</span> <span class="built_in">enumerate</span>(trs):</span><br><span class="line">                tds = tr.find_all(<span class="string">&quot;td&quot;</span>)</span><br><span class="line">                <span class="comment"># 这里倒着数，因为每个省会的td结构跟其他不一样</span></span><br><span class="line">                city_td = tds[-<span class="number">8</span>]</span><br><span class="line">                this_city = <span class="built_in">list</span>(city_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> this_city == my_city:</span><br><span class="line"></span><br><span class="line">                    high_temp_td = tds[-<span class="number">5</span>]</span><br><span class="line">                    low_temp_td = tds[-<span class="number">2</span>]</span><br><span class="line">                    weather_type_day_td = tds[-<span class="number">7</span>]</span><br><span class="line">                    weather_type_night_td = tds[-<span class="number">4</span>]</span><br><span class="line">                    wind_td_day = tds[-<span class="number">6</span>]</span><br><span class="line">                    wind_td_day_night = tds[-<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">                    high_temp = <span class="built_in">list</span>(high_temp_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line">                    low_temp = <span class="built_in">list</span>(low_temp_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line">                    weather_typ_day = <span class="built_in">list</span>(weather_type_day_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line">                    weather_type_night = <span class="built_in">list</span>(weather_type_night_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    wind_day = <span class="built_in">list</span>(wind_td_day.stripped_strings)[<span class="number">0</span>] + <span class="built_in">list</span>(wind_td_day.stripped_strings)[<span class="number">1</span>]</span><br><span class="line">                    wind_night = <span class="built_in">list</span>(wind_td_day_night.stripped_strings)[<span class="number">0</span>] + <span class="built_in">list</span>(wind_td_day_night.stripped_strings)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 如果没有白天的数据就使用夜间的</span></span><br><span class="line">                    temp = <span class="string">f&quot;<span class="subst">&#123;low_temp&#125;</span>——<span class="subst">&#123;high_temp&#125;</span>摄氏度&quot;</span> <span class="keyword">if</span> high_temp != <span class="string">&quot;-&quot;</span> <span class="keyword">else</span> <span class="string">f&quot;<span class="subst">&#123;low_temp&#125;</span>摄氏度&quot;</span></span><br><span class="line">                    weather_typ = weather_typ_day <span class="keyword">if</span> weather_typ_day != <span class="string">&quot;-&quot;</span> <span class="keyword">else</span> weather_type_night</span><br><span class="line">                    wind = <span class="string">f&quot;<span class="subst">&#123;wind_day&#125;</span>&quot;</span> <span class="keyword">if</span> wind_day != <span class="string">&quot;--&quot;</span> <span class="keyword">else</span> <span class="string">f&quot;<span class="subst">&#123;wind_night&#125;</span>&quot;</span></span><br><span class="line">                    <span class="keyword">return</span> this_city, temp, weather_typ, wind</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_access_token</span>():</span><br><span class="line">    <span class="comment"># 获取access token的url</span></span><br><span class="line">    url = <span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#123;&#125;&amp;secret=&#123;&#125;&#x27;</span> \</span><br><span class="line">        .<span class="built_in">format</span>(appID.strip(), appSecret.strip())</span><br><span class="line">    response = requests.get(url).json()</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br><span class="line">    access_token = response.get(<span class="string">&#x27;access_token&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> access_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_daily_love</span>():</span><br><span class="line">    <span class="comment"># 每日一句情话</span></span><br><span class="line">    url = <span class="string">&quot;https://api.lovelive.tools/api/SweetNothings/Serialization/Json&quot;</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    all_dict = json.loads(r.text)</span><br><span class="line">    sentence = all_dict[<span class="string">&#x27;returnObj&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    daily_love = sentence</span><br><span class="line">    <span class="keyword">return</span> daily_love</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_weather</span>(<span class="params">access_token, weather</span>):</span><br><span class="line">    <span class="comment"># touser 就是 openID</span></span><br><span class="line">    <span class="comment"># template_id 就是模板ID</span></span><br><span class="line">    <span class="comment"># url 就是点击模板跳转的url</span></span><br><span class="line">    <span class="comment"># data就按这种格式写，time和text就是之前&#123;&#123;time.DATA&#125;&#125;中的那个time，value就是你要替换DATA的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    today = datetime.date.today()</span><br><span class="line">    today_str = today.strftime(<span class="string">&quot;%Y年%m月%d日&quot;</span>)</span><br><span class="line"></span><br><span class="line">    body = &#123;</span><br><span class="line">        <span class="string">&quot;touser&quot;</span>: openId.strip(),</span><br><span class="line">        <span class="string">&quot;template_id&quot;</span>: weather_template_id.strip(),</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://weixin.qq.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;date&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: today_str</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;region&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: weather[<span class="number">0</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;weather&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: weather[<span class="number">2</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;temp&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: weather[<span class="number">1</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;wind_dir&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: weather[<span class="number">3</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;today_note&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: get_daily_love()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(access_token)</span><br><span class="line">    <span class="built_in">print</span>(requests.post(url, json.dumps(body)).text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_timetable</span>(<span class="params">access_token, message</span>):</span><br><span class="line">    body = &#123;</span><br><span class="line">        <span class="string">&quot;touser&quot;</span>: openId,</span><br><span class="line">        <span class="string">&quot;template_id&quot;</span>: timetable_template_id.strip(),</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://weixin.qq.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: message</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(access_token)</span><br><span class="line">    <span class="built_in">print</span>(requests.post(url, json.dumps(body)).text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weather_report</span>(<span class="params">city</span>):</span><br><span class="line">    <span class="comment"># 1.获取access_token</span></span><br><span class="line">    access_token = get_access_token()</span><br><span class="line">    <span class="comment"># 2. 获取天气</span></span><br><span class="line">    weather = get_weather(city)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;天气信息： <span class="subst">&#123;weather&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 3. 发送消息</span></span><br><span class="line">    send_weather(access_token, weather)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timetable</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="comment"># 1.获取access_token</span></span><br><span class="line">    access_token = get_access_token()</span><br><span class="line">    <span class="comment"># 3. 发送消息</span></span><br><span class="line">    send_timetable(access_token, message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    weather_report(<span class="string">&quot;河北&quot;</span>)</span><br><span class="line">    <span class="comment"># timetable(&quot;第二教学楼十分钟后开始英语课&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># schedule.every().day.at(&quot;08:00&quot;).do(weather_report, &quot;北京&quot;)</span></span><br><span class="line">    <span class="comment"># schedule.every().monday.at(&quot;13:30&quot;).do(timetable, &quot;还有15分钟开始下午的课程&quot;)</span></span><br><span class="line">    <span class="comment">#while True:</span></span><br><span class="line">    <span class="comment">#   schedule.run_pending()</span></span><br><span class="line">    <span class="comment">#   time.sleep(1)</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>原创文档链接：<a class="link"   href="https://www.bilibili.com/read/cv28928153/" >https://www.bilibili.com/read/cv28928153/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>原创视频链接：<br><a class="link"   href="https://www.bilibili.com/video/BV1Ng4y1r7EP/?spm_id_from=333.880.my_history.page.click&vd_source=576ff0210b33e8823a0a538d3f79f11f" >https://www.bilibili.com/video/BV1Ng4y1r7EP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=576ff0210b33e8823a0a538d3f79f11f<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
